<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Github Actions 实现 Hexo的CICD</title>
    <url>/posts/422af2d5.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Github-Actions-实现-Hexo的CICD"><a href="#Github-Actions-实现-Hexo的CICD" class="headerlink" title="Github Actions 实现 Hexo的CICD"></a>Github Actions 实现 Hexo的CICD</h2><h4 id="一、准备仓库"><a href="#一、准备仓库" class="headerlink" title="一、准备仓库"></a>一、准备仓库</h4><ul>
<li><p>Private repo ： blog </p>
<ul>
<li>用来存放 Hexo 博客源码</li>
</ul>
</li>
<li><p>Public repo ： <code>用户名.github.io</code></p>
<ul>
<li>用来存放 public 静态页面。最好是空的，当然是你现在的hexo博客也可以。</li>
</ul>
</li>
<li><p>将 Private repo clone 到本地</p>
</li>
</ul>
<h4 id="二、准备ssh-key"><a href="#二、准备ssh-key" class="headerlink" title="二、准备ssh key"></a>二、准备ssh key</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"Github邮箱地址"</span> -f ~/.ssh/github-actions-deploy</span><br><span class="line">或</span><br><span class="line">ssh-keygen -f ~/.ssh/github-actions-deploy	</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><code>github-actions-deploy.pub</code> — 公钥文件</li>
<li><code>github-actions-deploy</code> — 私钥文件</li>
</ul>
<h4 id="三、配置-GitHub-仓库"><a href="#三、配置-GitHub-仓库" class="headerlink" title="三、配置 GitHub 仓库"></a>三、配置 GitHub 仓库</h4><h5 id="配置用户名-github-io-公有仓库"><a href="#配置用户名-github-io-公有仓库" class="headerlink" title="配置用户名.github.io 公有仓库"></a>配置用户名.github.io 公有仓库</h5><ul>
<li>按照 <code>Settings</code>-&gt;<code>Deploye keys</code>-&gt;<code>Add deploy key</code>，进行公钥添加。<ul>
<li>Title ：<code>HEXO_DEPLOY_PUB</code>(自定义)</li>
<li>Key：<code>github-actions-deploy.pub</code> 文件中的内容</li>
<li>注意：必须勾上 <code>Allow write access</code></li>
</ul>
</li>
</ul>
<h5 id="配置blog私有仓库"><a href="#配置blog私有仓库" class="headerlink" title="配置blog私有仓库"></a>配置blog私有仓库</h5><ul>
<li>按照<code>Settings</code>-&gt;<code>Secrets</code> -&gt; <code>Add a new secret</code>，进行私钥添加。<ul>
<li>Name：<code>ACTION_DEPLOY_KEY</code></li>
<li>Value：<code>github-actions-deploy</code>文件中的内容</li>
</ul>
</li>
</ul>
<h4 id="四、使用Hexo创建博客"><a href="#四、使用Hexo创建博客" class="headerlink" title="四、使用Hexo创建博客"></a>四、使用Hexo创建博客</h4><ul>
<li>使用 npm 安装 Hexo</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装结果</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>初始化：Hexo安装完成后，在自定义文件夹下输入以下命令：</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo init &lt;file&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;file&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>在文件夹下启动hexo服务</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo server  或  hexo s</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>安装插件</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>在 Hexo 项目根目录配置文件<code>_config.yaml</code>中配置</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">url: http://用户名.github.io</span><br><span class="line">root: /</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:Github用户名/Github用户名.github.io.git  <span class="comment"># Public repo（SSH url）</span></span><br><span class="line">  branch: main</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>自动部署网站：</p>
<p>执行下列的其中一个命令,让<code>Hexo</code>在生成完毕后自动部署网站，两个命令的作用是相同的。</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo generate --deploy</span><br><span class="line">或</span><br><span class="line">hexo deploy --generate</span><br></pre></td></tr></tbody></table></figure>

<p>​       上面两个命令可以简写为:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo g -d</span><br><span class="line">或</span><br><span class="line">hexo d -g</span><br></pre></td></tr></tbody></table></figure>

<h4 id="五、创建Workflow"><a href="#五、创建Workflow" class="headerlink" title="五、创建Workflow"></a>五、创建Workflow</h4><p>首先在 <code>Private repo</code> 下创建一个新文件：<code>.github/workflows/deploy.yml</code>（文件名可以自定义，但是一定要放在 <code>.github/workflows</code> 目录下）或者 在 <code>Private repo</code> 仓库的<code>Actions</code>选项卡下点击<code>Set up this workflow</code>新建<code>workflow</code>，编写如下配置：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># workflow name</span></span><br><span class="line">name: Deploy Blog</span><br><span class="line"></span><br><span class="line">on: [push] <span class="comment"># 当有新push时运行</span></span><br><span class="line"><span class="comment">#on:</span></span><br><span class="line">  <span class="comment">#push:</span></span><br><span class="line">    <span class="comment">#branches:</span></span><br><span class="line">      <span class="comment">#- main</span></span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">  TZ: Asia/Shanghai</span><br><span class="line">  </span><br><span class="line"><span class="built_in">jobs</span>:</span><br><span class="line">  build:</span><br><span class="line">   	<span class="comment"># 定义运行环境</span></span><br><span class="line">    runs-on: ubuntu-latest   <span class="comment"># 在最新版的Ubuntu系统下运行</span></span><br><span class="line">	strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        node-version: [12.x]</span><br><span class="line">        </span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout  <span class="comment"># 将仓库内main分支的内容下载到工作目录</span></span><br><span class="line">        uses: actions/checkout@v2   <span class="comment"># 脚本来自 https://github.com/actions/checkout</span></span><br><span class="line">          </span><br><span class="line">      - name: Use Node.js <span class="variable">${{ matrix.node-version }</span>}   <span class="comment"># 配置Node环境</span></span><br><span class="line">        uses: actions/setup-node@v1   <span class="comment"># 配置脚本来自 https://github.com/actions/setup-node</span></span><br><span class="line">        with:</span><br><span class="line">          node-version: <span class="variable">${{ matrix.node-version }</span>}</span><br><span class="line">	</span><br><span class="line">	  <span class="comment">#- name: Cache node modules</span></span><br><span class="line">  		<span class="comment">#uses: actions/cache@v1</span></span><br><span class="line">  		<span class="comment">#with:</span></span><br><span class="line">    	  <span class="comment">#path: ~/.npm</span></span><br><span class="line">    	  <span class="comment">#key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}</span></span><br><span class="line"></span><br><span class="line">      - name: Setup Hexo</span><br><span class="line">        env:</span><br><span class="line">          ACTION_DEPLOY_KEY: <span class="variable">${{secrets.ACTION_DEPLOY_KEY}</span>}</span><br><span class="line">        run: |</span><br><span class="line">          <span class="comment"># set up private key for deploy</span></span><br><span class="line">          mkdir -p ~/.ssh/</span><br><span class="line">          <span class="built_in">echo</span> <span class="string">"<span class="variable">$ACTION_DEPLOY_KEY</span>"</span> &gt; ~/.ssh/id_rsa   <span class="comment"># 配置秘钥</span></span><br><span class="line">          chmod 600 ~/.ssh/id_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">	 </span><br><span class="line">      <span class="comment"># set git infomation</span></span><br><span class="line">	  - name: Setup Git Infomation</span><br><span class="line">  		run: |</span><br><span class="line">    	  git config --global user.email <span class="string">"xx@doe.com"</span>  <span class="comment"># 换成你自己的邮箱</span></span><br><span class="line">          git config --global user.name <span class="string">"xxx"</span>   <span class="comment"># 换成你自己的用户名	</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># install dependencies</span></span><br><span class="line">	  - name: Install dependencies</span><br><span class="line">        run: |</span><br><span class="line">          npm i -g hexo-cli   <span class="comment"># 安装hexo</span></span><br><span class="line">          npm i</span><br><span class="line">          </span><br><span class="line">      - name: Deploy Hexo</span><br><span class="line">        run: |</span><br><span class="line">           <span class="comment"># publish</span></span><br><span class="line">           hexo clean</span><br><span class="line">           hexo generate &amp;&amp; hexo deploy     <span class="comment"># 执行部署程序    </span></span><br><span class="line">       </span><br><span class="line">      <span class="comment"># Push 到 GitHub Pages</span></span><br><span class="line">      <span class="comment">#- name: Deploy Hexo To Github</span></span><br><span class="line">  		<span class="comment">#run: |</span></span><br><span class="line">    	  <span class="comment">#cd public</span></span><br><span class="line">    	  <span class="comment">#rm -rf .git</span></span><br><span class="line">    	  <span class="comment">#echo blog.hvnobug.com &gt;&gt; CNAME</span></span><br><span class="line">    	  <span class="comment">#git init</span></span><br><span class="line">    	  <span class="comment">#git add -A &amp;&amp; git commit -m "Site updated: `date '+%Y-%m-%d %H:%Min:%S'`"</span></span><br><span class="line">    	  <span class="comment">#git push -f git@github.com:xxx/用户名.github.io.git main</span></span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Sofa</title>
    <url>/posts/16107.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210510174610.jpg" alt="001"></p>
]]></content>
  </entry>
  <entry>
    <title>git的基本使用方法</title>
    <url>/posts/64569.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="git的基本使用方法"><a href="#git的基本使用方法" class="headerlink" title="git的基本使用方法"></a>git的基本使用方法</h2><h4 id="一、git下载与安装"><a href="#一、git下载与安装" class="headerlink" title="一、git下载与安装"></a>一、git下载与安装</h4><ol>
<li><p>在git官网，根据自己电脑系统下载相应的安装包</p>
</li>
<li><p>一直点击next，直到出现install，点击install，安装完成后点击finish</p>
</li>
<li><p>检查git是否安装ok：</p>
<p>——Ctrl+r，在弹出框中输入cdm，弹出界面中输入git，回车</p>
<p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210318175507.png" alt="image-20210318143942082"></p>
</li>
</ol>
<h4 id="二、环境配置"><a href="#二、环境配置" class="headerlink" title="二、环境配置"></a>二、环境配置</h4><p>​    1. 先在GitHub上注册一个账号，右键Git Bash进行环境配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 配置用户名</span></span><br><span class="line">git config --global user.name <span class="string">"username"</span>    //（ <span class="string">"username"</span>是自己的账户名）</span><br><span class="line"><span class="comment"># 配置邮箱</span></span><br><span class="line">git config --global user.email <span class="string">"username@email.com"</span>   //(<span class="string">"username@email.com"</span>注册账号时用的邮箱)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看配置是否OK</span></span><br><span class="line">git config --global --list </span><br></pre></td></tr></tbody></table></figure>

<p>​    2. 通过命令获取公钥</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 普通生成rsa方式（用于多个服务器之间的登录）</span></span><br><span class="line">ssh-keygen -t rsa   </span><br><span class="line">或</span><br><span class="line"><span class="comment"># 针对某个网站的rsa生成方式</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"xxxxx@xxxxx.com"</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看sshkey的内容</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub  </span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210318175518.png" alt="image-20210318144956197"></p>
<ol start="3">
<li>系统盘目录下（一般在 C:\Users\你的用户名.ssh）</li>
</ol>
<p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210318175533.png" alt="image-20210318145354184"></p>
<ol start="4">
<li>将id_ras.pub文件里的内容粘贴到到框框内</li>
</ol>
<p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210318175550.png" alt="image-20210318145444469"></p>
<ol start="5">
<li>最后在项目的终端输入</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh -T git@gltee.com</span><br></pre></td></tr></tbody></table></figure>

<h4 id="三、上传代码"><a href="#三、上传代码" class="headerlink" title="三、上传代码"></a>三、上传代码</h4><h5 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h5><ol>
<li>进入本地项目目录初始化版本库</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化版本库</span></span><br><span class="line">git init  </span><br><span class="line"><span class="comment"># 添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件 </span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># 把添加的文件提交到版本库，并填写提交备注</span></span><br><span class="line">git commit -m <span class="string">"xxx"</span> </span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>设置远程仓库地址并提交    </li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 设置远程仓库地址</span></span><br><span class="line">git remote add origin https://gitee.com/xxxx/xxx.git  //你的远程库地址</span><br><span class="line"><span class="comment"># 提交到远程服务器</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></tbody></table></figure>

<h5 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h5><ol>
<li>先将仓库clone到本地</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将远程仓库克隆到本地</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/xxxx/xxx.git</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>提交代码</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件 </span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># 把添加的文件提交到版本库，并填写提交备注</span></span><br><span class="line">git commit -m <span class="string">"xxx"</span> </span><br><span class="line"><span class="comment"># 将本地提交推送到远程仓库</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></tbody></table></figure>

<p><strong>注意</strong>：提交代码到远程仓库前需要先执行（拉取代码到本地）：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git pull origin 分支名称</span><br></pre></td></tr></tbody></table></figure>

<h4 id="四、Git-更换仓库地址"><a href="#四、Git-更换仓库地址" class="headerlink" title="四、Git 更换仓库地址"></a>四、Git 更换仓库地址</h4><ol>
<li>查看当前仓库地址信息</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>更换为新的地址</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git remote set-url origin https://gitee.com/xxxx/xxx.git  //新地址</span><br></pre></td></tr></tbody></table></figure>

<h4 id="五、分支操作"><a href="#五、分支操作" class="headerlink" title="五、分支操作"></a>五、分支操作</h4><ol>
<li>创建分支</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建指定名称的分支</span></span><br><span class="line">git branch 分支名 </span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>查看分支</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有分支，* 号代表当前工作分支</span></span><br><span class="line">git branch </span><br><span class="line"><span class="comment"># 查看该项目所有的分支，*号代表当前工作分支</span></span><br><span class="line">git branch -a</span><br><span class="line"><span class="comment"># 查看分支详情，包括分支指向的commitId及提交信息</span></span><br><span class="line">git branch -v </span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>切换分支</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#切换到指定分支</span></span><br><span class="line">git checkout 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建并切换到指定分支 </span></span><br><span class="line">git checkout -b 分支名 </span><br><span class="line"></span><br><span class="line"><span class="comment">#例如：拉取远程5.1分支到本地并切换过去</span></span><br><span class="line">git checkout -b versions/5.1m_d origin/versions/5.1m_d  </span><br></pre></td></tr></tbody></table></figure>

<p>​    4. 合并分支</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将指定分支合并到当前分支</span></span><br><span class="line">git merge 分支名 </span><br></pre></td></tr></tbody></table></figure>

<p>​    5. 删除分支</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 删除一个干净的分支(即相对当前分支而言该分支没有新的提交记录)</span></span><br><span class="line">git branch -d 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除一个分支</span></span><br><span class="line">git branch -D 分支名</span><br></pre></td></tr></tbody></table></figure>

<p>​    <strong>注意：</strong>删除分支前都需要先切换到其他分支才能进行删除操作</p>
<ol start="6">
<li>分支恢复</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 根据指定commit创建新分支</span></span><br><span class="line">git branch 分支名 版本号</span><br></pre></td></tr></tbody></table></figure>

<ol start="7">
<li>重命名分支</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git branch -m 分支名 newname</span><br></pre></td></tr></tbody></table></figure>

<ol start="8">
<li>分支暂存</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将工作暂存</span></span><br><span class="line">git stash </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看暂存区内容</span></span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从暂存区之中进行恢复，恢复的同时也将stash内容删除</span></span><br><span class="line">git stash pop</span><br></pre></td></tr></tbody></table></figure>

<ol start="9">
<li>在git add时忽略某一修改过的文件上传提交</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git add -u</span><br><span class="line">git reset -- src/assets/config/Config.json（文件路径）</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>vue创建项目</title>
    <url>/posts/41222.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="vue创建项目"><a href="#vue创建项目" class="headerlink" title="vue创建项目"></a>vue创建项目</h1><h3 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h3><h4 id="第一步：先安装node-js和npm。"><a href="#第一步：先安装node-js和npm。" class="headerlink" title="第一步：先安装node.js和npm。"></a>第一步：先安装node.js和npm。</h4><ol>
<li><p>官网下载node.js并安装（一直next）</p>
</li>
<li><p>输入<code>node -v</code> 和npm -v 查询node和npm的版本号</p>
</li>
<li><p>配置npm在安装全局模块时的路径和缓存cache的路径</p>
<ul>
<li>在node.js安装目录下新建两个文件夹 node_global和node_cache，然后在cmd命令下执行如下两个命令：</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">"D:\Program Files\nodejs\node_global"</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">"D:\Program Files\nodejs\node_cache"</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>在“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量” -&gt; 系统变量中新建一个变量名为 “NODE_PATH”，值为“D:\nodejs\node_modules”(自定义)</li>
</ul>
<p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322170537.png" alt="image-20210322170537657"></p>
<ul>
<li>编辑用户变量里的Path，将相应npm的路径改为：D:\Program Files\nodejs\node_global(自定义)</li>
</ul>
<p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322170708.png" alt="image-20210322170708057"></p>
<ul>
<li>测试：在cmd命令下执行 <code>npm install webpack -g </code>，查看自定义的两个文件夹是否生效</li>
</ul>
</li>
</ol>
<h4 id="第二步：切换镜像源。"><a href="#第二步：切换镜像源。" class="headerlink" title="第二步：切换镜像源。"></a>第二步：切换镜像源。</h4><p>方法一：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 全局切换镜像源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 查看镜像源使用状态</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="comment"># 全局切换官方镜像源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></tbody></table></figure>

<p>方法二：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm  install  -g  cnpm  --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure>

<p>方法三：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装nrm</span></span><br><span class="line">npm install -g nrm</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 列出可供选择的源</span></span><br><span class="line">nrm ls (*表示正在使用的镜像源)</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322164701.png" alt="image-20210322164700957"></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到淘宝镜像源</span></span><br><span class="line">nrm use taobao</span><br><span class="line"><span class="comment"># 测试速度</span></span><br><span class="line">nrm <span class="built_in">test</span> npm</span><br></pre></td></tr></tbody></table></figure>

<h4 id="第三步：安装vue-cli-脚手架-。"><a href="#第三步：安装vue-cli-脚手架-。" class="headerlink" title="第三步：安装vue-cli 脚手架 。"></a>第三步：安装vue-cli 脚手架 。</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装 vue-cli</span></span><br><span class="line">cnpm install vue-cli -g  </span><br></pre></td></tr></tbody></table></figure>

<p>使用 <code>vue -V</code> （注意 V 大写）查看是否安装成功</p>
<h4 id="第四步：安装webpack"><a href="#第四步：安装webpack" class="headerlink" title="第四步：安装webpack"></a>第四步：安装webpack</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></tbody></table></figure>

<p>输入 <code>webpack -v</code> 查看是否安装成功</p>
<h3 id="二、创建项目"><a href="#二、创建项目" class="headerlink" title="二、创建项目"></a>二、创建项目</h3><h4 id="方法一：手动创建"><a href="#方法一：手动创建" class="headerlink" title="方法一：手动创建"></a>方法一：手动创建</h4><h5 id="第一步：进入你想放置项目的文件夹，在命令提示窗口执行如下命令："><a href="#第一步：进入你想放置项目的文件夹，在命令提示窗口执行如下命令：" class="headerlink" title="第一步：进入你想放置项目的文件夹，在命令提示窗口执行如下命令："></a>第一步：进入你想放置项目的文件夹，在命令提示窗口执行如下命令：</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vue init webpack 项目名称</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322173629.png" alt="image-20210322173629131"></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Target directory exists. Continue? (Y/n) 直接回车默认(然后会下载 vue2.0模板，这里可能需要连代理)</span><br><span class="line"></span><br><span class="line">Project name (vue-test) 直接回车默认</span><br><span class="line"></span><br><span class="line">Project description (A Vue.js project) 直接回车默认</span><br><span class="line"></span><br><span class="line">Author 直接回车默认 &lt;br&gt;Install vue-router? yes</span><br><span class="line"></span><br><span class="line">Use ESLint to lint your code? No</span><br><span class="line"></span><br><span class="line">pick an eslint preset. 默认Standard</span><br><span class="line"></span><br><span class="line">setup unit tests with karma + mocha?No(单元测试不需要)</span><br><span class="line"></span><br><span class="line">setup e2e tests with Nightwatch?No(单元测试不需要)</span><br></pre></td></tr></tbody></table></figure>

<h5 id="第二步：进入到项目中，启动项目："><a href="#第二步：进入到项目中，启动项目：" class="headerlink" title="第二步：进入到项目中，启动项目："></a>第二步：进入到项目中，启动项目：</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></tbody></table></figure>

<h4 id="方法二：图形化创建项目"><a href="#方法二：图形化创建项目" class="headerlink" title="方法二：图形化创建项目"></a>方法二：图形化创建项目</h4><h5 id="第一步：创建项目文件夹，启动ui界面"><a href="#第一步：创建项目文件夹，启动ui界面" class="headerlink" title="第一步：创建项目文件夹，启动ui界面"></a>第一步：创建项目文件夹，启动ui界面</h5><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></tbody></table></figure>

<h5 id="第二步：创建项目"><a href="#第二步：创建项目" class="headerlink" title="第二步：创建项目"></a>第二步：创建项目</h5><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322174601.png" alt="image-20210322174601023"></p>
<h5 id="第三步：填写项目名"><a href="#第三步：填写项目名" class="headerlink" title="第三步：填写项目名"></a>第三步：填写项目名</h5><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322174631.png" alt="image-20210322174630899"></p>
<p>第四步：选择预设</p>
<p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322175042.png" alt="image-20210322175042373"></p>
<p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322181201.png" alt="image-20210322181201293"></p>
<p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322181216.png" alt="image-20210322181216513"></p>
<p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322181038.png" alt="image-20210322181038141"></p>
<p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322175214.png" alt="image-20210322175214259"></p>
<p>第五步：添加插件</p>
<p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322175443.png" alt="image-20210322175443205"></p>
<p>第六步：项目依赖管理</p>
<p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322175518.png" alt="image-20210322175518272"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo和github搭建个人博客</title>
    <url>/posts/fbbf84ee.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="使用hexo和github搭建个人博客"><a href="#使用hexo和github搭建个人博客" class="headerlink" title="使用hexo和github搭建个人博客"></a>使用hexo和github搭建个人博客</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>要有一个github账号</li>
<li>安装node.js，npm依赖</li>
<li>安装git工具</li>
</ol>
<h3 id="为github设置SSH-Keys"><a href="#为github设置SSH-Keys" class="headerlink" title="为github设置SSH Keys"></a>为github设置SSH Keys</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"GitHub邮箱地址"</span></span><br></pre></td></tr></tbody></table></figure>

<p>在用户目录下找到<code>.ssh</code>文件夹，将里面后缀为<code>.pub</code>的文件内容复制</p>
<p>登录Github，点击setting进入—&gt; SSH and GPG keys —&gt; New SSH key，然后把你复制的内容放到Key中，Title中的内容可以随便填一个就行。</p>
<h3 id="创建github个人仓库"><a href="#创建github个人仓库" class="headerlink" title="创建github个人仓库"></a>创建github个人仓库</h3><p>仓库名为：用户名.github.io（必须是你的用户名，其它名称无效）</p>
<ol>
<li>点击New repository</li>
<li>输入Repository name，必需为<code>用户名.github.io</code>格式。</li>
<li>点击按钮Create repository</li>
<li>进入仓库用户名.github.io,点击setting，找到GitHub Pages模块</li>
<li>点击choose a theme选择一个页面主题</li>
<li>访问<a href="https://username.github.io就可以访问博客网站了/">https://username.github.io就可以访问博客网站了</a></li>
</ol>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>使用 npm 安装 Hexo：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证是否成功</span></span><br><span class="line">hexo -v   </span><br></pre></td></tr></tbody></table></figure>

<p>初始化仓库：在你自己指定位置创建项目文件夹blog（自定义），进入Blog根目录下执行</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo init &lt;blog&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;blog&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure>

<p>然后本地运行：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo new test_my_site  <span class="comment">#生成文章</span></span><br><span class="line">hexo g <span class="comment"># 生成对应的html</span></span><br><span class="line">hexo s <span class="comment"># 启动服务，本地预览</span></span><br></pre></td></tr></tbody></table></figure>

<p>打开浏览器访问 <a href="http://localhost/">http://localhost</a>:4000 即可看到内容</p>
<h3 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h3><p>修改配置文件_config.yml：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:Github用户名/Github用户名.github.io.git  <span class="comment"># Public repo（SSH url）</span></span><br><span class="line">  branch: main</span><br></pre></td></tr></tbody></table></figure>

<p>上传，发布网站：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save   <span class="comment">#安装插件</span></span><br><span class="line">hexo clean  <span class="comment"># 清除缓存和已生成的静态文件</span></span><br><span class="line">hexo g   <span class="comment"># 生成页面</span></span><br><span class="line">hexo d  <span class="comment"># 部署</span></span><br></pre></td></tr></tbody></table></figure>

<p>然后访问<a href="https://username.github.io就可以访问博客网站了/">https://username.github.io就可以访问博客网站了</a></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>同一台电脑配置多个ssh秘钥</title>
    <url>/posts/a02ab518.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="同一台电脑配置多个ssh秘钥"><a href="#同一台电脑配置多个ssh秘钥" class="headerlink" title="同一台电脑配置多个ssh秘钥"></a>同一台电脑配置多个ssh秘钥</h2><h3 id="1-删除git之前的配置项"><a href="#1-删除git之前的配置项" class="headerlink" title="1.删除git之前的配置项"></a>1.删除git之前的配置项</h3><p>查看git配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git config --system --list   //系统级配置</span><br><span class="line">git config --global --list   //全局配置</span><br><span class="line">git config --<span class="built_in">local</span> --list    //当前项目配置</span><br></pre></td></tr></tbody></table></figure>

<p>删除配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-生成ssh-key"><a href="#2-生成ssh-key" class="headerlink" title="2.生成ssh key"></a>2.生成ssh key</h3><p>打开git bash 输入以下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"邮箱"</span> -f ~/.ssh/id_rsa_01</span><br><span class="line">// -f后面是密钥路径和自定义的文件名id_rsa_01，邮箱可以相同也可以不同</span><br></pre></td></tr></tbody></table></figure>

<p>直接三次回车生成第一个ssh key</p>
<p>在当前用户目录的 .ssh 目录下会生成id_rsa_01私钥文件和 id_rsa_01.pub 公钥文件</p>
<p>登录GitHub，将 id_rsa_01.pub 公钥中的内容添加到里面的key输入框中</p>
<h3 id="3-生成第二个ssh-key"><a href="#3-生成第二个ssh-key" class="headerlink" title="3.生成第二个ssh key"></a>3.生成第二个ssh key</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"邮箱"</span> -f ~/.ssh/id_rsa_02</span><br><span class="line">// -f后面是密钥路径和自定义的文件名id_rsa_02，邮箱可以相同也可以不同</span><br></pre></td></tr></tbody></table></figure>

<p>直接三次回车生成第二个ssh key</p>
<p>在当前用户目录的 .ssh 目录下会生成id_rsa_02私钥文件和 id_rsa_02.pub 公钥文件</p>
<p>登录Gitee，将 id_rsa_02.pub 公钥中的内容添加到里面的key输入框中</p>
<h3 id="4-配置config文件"><a href="#4-配置config文件" class="headerlink" title="4.配置config文件"></a>4.配置config文件</h3><p>.ssh 目录下创建一个 config 文本文件，为每个账号配置一个Host节点，主要配置项说明：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Host    　    <span class="comment">#　别名，描述参数的作用范围</span></span><br><span class="line">HostName　    <span class="comment">#　ip或域名</span></span><br><span class="line">IdentityFile　<span class="comment">#　私钥文件路径</span></span><br><span class="line">IdentitiesOnly <span class="comment"># 只接受SSH key 登录</span></span><br><span class="line">PreferredAuthentications　<span class="comment">#　认证方式，强制使用PublicKey验证</span></span><br><span class="line">User　        <span class="comment">#　用户名</span></span><br><span class="line">Port　        <span class="comment">#　ssh端口号，默认22</span></span><br></pre></td></tr></tbody></table></figure>

<p>执行命令：<code>vi config</code></p>
<p>输入字母<code>i</code>，进入编辑模式</p>
<p>config 文件内容：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># ~/.ssh/config 配置多个git的ssh-key</span></span><br><span class="line"><span class="comment"># 第一个SSH Key</span></span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile ~/.ssh/github/id_rsa_01</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个SSH Key</span></span><br><span class="line">Host gitee.com</span><br><span class="line">    HostName gitee.com</span><br><span class="line">    IdentityFile  ~/.ssh/gitee/id_rsa_02</span><br><span class="line">    PreferredAuthentications publickey</span><br></pre></td></tr></tbody></table></figure>

<p>先按Esc，输入<code>:wq</code>，回车</p>
<p>在 git bash 中输入以下命令测试该用户的 SSH 密钥是否有效：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></tbody></table></figure>

<p>在 git bash 中输入以下命令测试该用户的 SSH 密钥是否有效：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com </span><br></pre></td></tr></tbody></table></figure>

<h3 id="5-为各自仓库配置不同的用户名和邮箱"><a href="#5-为各自仓库配置不同的用户名和邮箱" class="headerlink" title="5.为各自仓库配置不同的用户名和邮箱"></a>5.为各自仓库配置不同的用户名和邮箱</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> user.name <span class="string">'xx'</span> git config --<span class="built_in">local</span> user.email <span class="string">'xx@qq.com'</span> </span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript学习</title>
    <url>/posts/bea32518.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h3 id="1-执行ts文件"><a href="#1-执行ts文件" class="headerlink" title="1.执行ts文件"></a>1.执行ts文件</h3><h5 id="1-1-方式一"><a href="#1-1-方式一" class="headerlink" title="1.1  方式一"></a>1.1  方式一</h5><ul>
<li><p>npm安装包：<code>npm i -g typescript</code></p>
</li>
<li><p>将后缀名为<code>.ts</code>的文件转换为<code>.js</code>文件: <code> tsc 文件名</code></p>
</li>
<li><p>执行js文件:  <code>node 文件名（后缀为.js）</code></p>
</li>
</ul>
<h5 id="1-2-方式二（简化）"><a href="#1-2-方式二（简化）" class="headerlink" title="1.2  方式二（简化）"></a>1.2  方式二（简化）</h5><ul>
<li><p>npm安装包：<code>npm i -g ts-node</code></p>
</li>
<li><p>执行ts文件:  <code>ts-node 文件名</code></p>
</li>
</ul>
<h5 id="1-3-方式三（自动编译）"><a href="#1-3-方式三（自动编译）" class="headerlink" title="1.3  方式三（自动编译）"></a>1.3  方式三（自动编译）</h5><ul>
<li><p>生成tsconfig.json配置文件：<code>tsc --init</code></p>
</li>
<li><p>修改tsconfig.json文件：<code>"outDir": "./js"</code></p>
</li>
<li><p>vscode点击终端—运行任务—typescript—tsc:监视-tsconfig.json</p>
</li>
</ul>
<h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h3><h5 id="2-1-布尔类型（boolean）"><a href="#2-1-布尔类型（boolean）" class="headerlink" title="2.1 布尔类型（boolean）"></a>2.1 布尔类型（boolean）</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flag:<span class="built_in">boolean</span> = <span class="literal">true</span> / <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="2-2-数字类型（number）"><a href="#2-2-数字类型（number）" class="headerlink" title="2.2 数字类型（number）"></a>2.2 数字类型（number）</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line">&nbsp;<span class="keyword">var</span> a:<span class="built_in">number</span> = <span class="number">123</span>;</span><br><span class="line">a = <span class="literal">false</span>       <span class="comment">//错误写法</span></span><br><span class="line">a = <span class="string">"string"</span>    <span class="comment">//错误写法</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="2-3-字符串类型（string）"><a href="#2-3-字符串类型（string）" class="headerlink" title="2.3 字符串类型（string）"></a>2.3 字符串类型（string）</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line">&nbsp;<span class="keyword">var</span> str:<span class="built_in">string</span> = <span class="string">"this is ts"</span>;</span><br><span class="line">str = <span class="number">12</span>      <span class="comment">//错误写法</span></span><br><span class="line">str = <span class="literal">false</span>   <span class="comment">//错误写法</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="2-4-数组类型（array）"><a href="#2-4-数组类型（array）" class="headerlink" title="2.4 数组类型（array）"></a>2.4 数组类型（array）</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种定义数组的方式：</span></span><br><span class="line"><span class="keyword">var</span> arr1:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">567</span>];</span><br><span class="line"><span class="keyword">var</span> arr1:<span class="built_in">string</span>[] = [<span class="string">"js"</span>,<span class="string">"php"</span>,<span class="string">"java"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种定义数组的方式：</span></span><br><span class="line"><span class="keyword">var</span> arr2:<span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">567</span>];</span><br><span class="line"><span class="keyword">var</span> arr2:<span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">"js"</span>,<span class="string">"php"</span>,<span class="string">"java"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3:<span class="built_in">any</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">"34"</span>,<span class="literal">true</span>];</span><br></pre></td></tr></tbody></table></figure>

<h5 id="2-5-元组类型（tuple）-可以指定数组里面每一个元素的类型-属于数组的一种"><a href="#2-5-元组类型（tuple）-可以指定数组里面每一个元素的类型-属于数组的一种" class="headerlink" title="2.5 元组类型（tuple）: 可以指定数组里面每一个元素的类型,属于数组的一种"></a>2.5 元组类型（tuple）: 可以指定数组里面每一个元素的类型,属于数组的一种</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr:[<span class="built_in">string</span>,<span class="built_in">number</span>,<span class="built_in">boolean</span>] = [<span class="string">"ts"</span>,<span class="number">2.18</span>,<span class="literal">false</span>]</span><br></pre></td></tr></tbody></table></figure>

<h5 id="2-6-枚举类型（enum）：用来定义标识符"><a href="#2-6-枚举类型（enum）：用来定义标识符" class="headerlink" title="2.6 枚举类型（enum）：用来定义标识符"></a>2.6 枚举类型（enum）：用来定义标识符</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> 枚举名{</span><br><span class="line">    标识符[=整型常数]</span><br><span class="line">    标识符[=整型常数]</span><br><span class="line">    ...</span><br><span class="line">    标识符[=整型常数]</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="built_in">enum</span> Flag{success=<span class="number">1</span>,error=-<span class="number">1</span>};</span><br><span class="line"><span class="keyword">var</span> f:Flag = Flag.success;  </span><br><span class="line"><span class="built_in">console</span>.log(f);   <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不赋值默认为其索引值</span></span><br><span class="line"><span class="built_in">enum</span> Color{red,blue,orange};</span><br><span class="line"><span class="keyword">var</span> c:Color = Color.blue;</span><br><span class="line"><span class="built_in">console</span>.log(c);  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果某一元素有赋值，那它后面没有指定值的元素，值为前一元素加 1</span></span><br><span class="line"><span class="built_in">enum</span> Color{red,blue=<span class="number">5</span>,orange};</span><br><span class="line"><span class="built_in">console</span>.log(Color.red);     <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(Color.blue);    <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(Color.orange);  <span class="comment">// 6</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="2-7-任意类型（any）"><a href="#2-7-任意类型（any）" class="headerlink" title="2.7 任意类型（any）"></a>2.7 任意类型（any）</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num:<span class="built_in">any</span> = <span class="number">123</span>;</span><br><span class="line">num = <span class="string">"str"</span>;</span><br><span class="line">num = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oBox = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>)       <span class="comment">// 能执行但ts里面会报错</span></span><br><span class="line"><span class="keyword">var</span> oBox:<span class="built_in">any</span> = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>)   <span class="comment">// 使用any后就不会报错</span></span><br><span class="line">oBox.style.color = red</span><br></pre></td></tr></tbody></table></figure>

<h5 id="2-8-null-和-undefined：其他（never类型）数据类型的子类型"><a href="#2-8-null-和-undefined：其他（never类型）数据类型的子类型" class="headerlink" title="2.8 null 和 undefined：其他（never类型）数据类型的子类型"></a>2.8 null 和 undefined：其他（never类型）数据类型的子类型</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num:<span class="built_in">number</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// 输出：undefined，报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num:<span class="literal">undefined</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// 可以运行不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个元素 可能是number类型 可能是undefined</span></span><br><span class="line"><span class="keyword">var</span> num:<span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line">num = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义后未赋值</span></span><br><span class="line"><span class="keyword">var</span> num:<span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// undefined，不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个元素 可能是number类型 可能是null 可能是undefined</span></span><br><span class="line"><span class="keyword">var</span> num:<span class="built_in">number</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">num = <span class="number">145</span>   </span><br><span class="line"><span class="built_in">console</span>.log(num);  <span class="comment">// 145</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="2-9-void类型-：表示没有任何类型，一般用于定义方法时方法没有返回值"><a href="#2-9-void类型-：表示没有任何类型，一般用于定义方法时方法没有返回值" class="headerlink" title="2.9 void类型 ：表示没有任何类型，一般用于定义方法时方法没有返回值"></a>2.9 void类型 ：表示没有任何类型，一般用于定义方法时方法没有返回值</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>):<span class="title">number</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">};</span><br><span class="line">run();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法没有返回任何类型，正确写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>):<span class="title">void</span></span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"run"</span>)</span><br><span class="line">};</span><br><span class="line">run();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>):<span class="title">undefined</span></span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"run"</span>)</span><br><span class="line">};</span><br><span class="line">run();</span><br></pre></td></tr></tbody></table></figure>

<h5 id="2-10-never类型：是其他类型（包括null-和-undefined），代表从不会出现的值"><a href="#2-10-never类型：是其他类型（包括null-和-undefined），代表从不会出现的值" class="headerlink" title="2.10 never类型：是其他类型（包括null 和 undefined），代表从不会出现的值"></a>2.10 never类型：是其他类型（包括null 和 undefined），代表从不会出现的值</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line">声明<span class="built_in">never</span>的变量只能被<span class="built_in">never</span>类型所赋值<span class="keyword">var</span> a:<span class="literal">undefined</span>;a = <span class="literal">undefined</span>;<span class="keyword">var</span> b:<span class="literal">null</span>;b = <span class="literal">null</span>;<span class="keyword">var</span> a:<span class="built_in">never</span>;a = <span class="number">123</span>；    <span class="comment">// 报错a = (()=&gt;(){  throw new Error('错误')})()</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-函数"><a href="#3-函数" class="headerlink" title="3.函数"></a>3.函数</h3><h5 id="3-1-函数声明法："><a href="#3-1-函数声明法：" class="headerlink" title="3.1 函数声明法："></a>3.1 函数声明法：</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>):<span class="title">string</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"run"</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>):<span class="title">string</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h5 id="3-2-匿名函数"><a href="#3-2-匿名函数" class="headerlink" title="3.2  匿名函数"></a>3.2  匿名函数</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>):<span class="title">number</span></span>{	<span class="keyword">return</span> <span class="number">123</span>}fun2();</span><br></pre></td></tr></tbody></table></figure>

<h5 id="3-3-定义方法传参"><a href="#3-3-定义方法传参" class="headerlink" title="3.3 定义方法传参"></a>3.3 定义方法传参</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInFo</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>):<span class="title">string</span></span>{</span><br><span class="line">	<span class="keyword">return</span> <span class="string">`<span class="subst">${name}</span> --- <span class="subst">${age}</span>`</span></span><br><span class="line">}</span><br><span class="line">getInFo(<span class="string">'zhangsan'</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getInFo = <span class="function"><span class="keyword">function</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>):<span class="title">string</span></span>{</span><br><span class="line">	<span class="keyword">return</span> <span class="string">`<span class="subst">${name}</span> --- <span class="subst">${age}</span>`</span></span><br><span class="line">}</span><br><span class="line">getInFo(<span class="string">'wangsi'</span>,<span class="number">15</span>);</span><br></pre></td></tr></tbody></table></figure>

<h5 id="3-4-方法可选参数"><a href="#3-4-方法可选参数" class="headerlink" title="3.4 方法可选参数"></a>3.4 方法可选参数</h5><p>ts里面方法的实参和形参必须一样，如果不一样就需要配置可选参数</p>
<p>注意：使用 ? 号表示，可选参数必须配置到参数最后面</p>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// age可传可不传</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInFo</span>(<span class="params">name:<span class="built_in">string</span>,age?:<span class="built_in">number</span></span>):<span class="title">string</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(age){</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">${name}</span> --- <span class="subst">${age}</span>`</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">${name}</span> --- 年龄保密`</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">getInFo(<span class="string">'lisi'</span>);</span><br></pre></td></tr></tbody></table></figure>

<h5 id="3-5-默认参数"><a href="#3-5-默认参数" class="headerlink" title="3.5 默认参数"></a>3.5 默认参数</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInFo</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span>=<span class="number">20</span></span>):<span class="title">string</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(age){</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">${name}</span> --- <span class="subst">${age}</span>`</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">${name}</span> --- 年龄保密`</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">getInFo(<span class="string">'wangwu'</span>);</span><br></pre></td></tr></tbody></table></figure>

<h5 id="3-6-剩余参数-三点运算符"><a href="#3-6-剩余参数-三点运算符" class="headerlink" title="3.6 剩余参数(三点运算符)"></a>3.6 剩余参数(三点运算符)</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">...result:<span class="built_in">number</span>[]</span>):<span class="title">number</span></span>{</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(vari=<span class="number">0</span>;i&lt;result.length;i++){</span><br><span class="line">        sum+=result[i];</span><br><span class="line">    }</span><br><span class="line">	<span class="keyword">return</span> sum</span><br><span class="line">}</span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span>,...result:<span class="built_in">number</span>[]</span>):<span class="title">number</span></span>{</span><br><span class="line">    <span class="keyword">var</span> sum = a+b;</span><br><span class="line">    <span class="keyword">for</span>(vari=<span class="number">0</span>;i&lt;result.length;i++){</span><br><span class="line">        sum+=result[i];</span><br><span class="line">    }</span><br><span class="line">	<span class="keyword">return</span> sum</span><br><span class="line">}</span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br></pre></td></tr></tbody></table></figure>

<h5 id="3-7-函数重载"><a href="#3-7-函数重载" class="headerlink" title="3.7 函数重载"></a>3.7 函数重载</h5><p>重载指出现两个或两个以上同名函数，但它们传入的参数不一样，所执行的功能也不一样</p>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInFo</span>(<span class="params">name:<span class="built_in">string</span></span>):<span class="title">string</span></span>{};</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInFo</span>(<span class="params">age:<span class="built_in">number</span></span>):<span class="title">number</span></span>{};</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInFo</span>(<span class="params">str:<span class="built_in">any</span></span>):<span class="title">any</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> str === <span class="string">'string'</span>){</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'我叫:'</span>+str</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'我的年龄是:'</span>+str</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line">getInFo(<span class="string">'zhangsan'</span>);  <span class="comment">//正确</span></span><br><span class="line">getInFo(<span class="number">10</span>);		  <span class="comment">//正确</span></span><br><span class="line">getInFo(<span class="literal">true</span>);		  <span class="comment">//错误</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="3-8-箭头函数-里面this指向上下文"><a href="#3-8-箭头函数-里面this指向上下文" class="headerlink" title="3.8 箭头函数(里面this指向上下文)"></a>3.8 箭头函数(里面this指向上下文)</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">    alert(<span class="string">'run'</span>)</span><br><span class="line">},<span class="number">1000</span>)</span><br></pre></td></tr></tbody></table></figure>

<h3 id="4-类"><a href="#4-类" class="headerlink" title="4.类"></a>4.类</h3><h5 id="4-1-类的定义"><a href="#4-1-类的定义" class="headerlink" title="4.1 类的定义"></a>4.1 类的定义</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;                 <span class="comment">// 属性</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">n:<span class="built_in">string</span></span>)</span>{       <span class="comment">// 构造函数，实例化类的时候触发的方法</span></span><br><span class="line">        <span class="built_in">this</span>.name = n;</span><br><span class="line">    }</span><br><span class="line">    run():<span class="built_in">void</span>{</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'zhangsan'</span>);</span><br><span class="line">p.run();</span><br></pre></td></tr></tbody></table></figure>

<h5 id="4-2-继承（extends-super）"><a href="#4-2-继承（extends-super）" class="headerlink" title="4.2 继承（extends/super）"></a>4.2 继承（extends/super）</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;                </span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{       </span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    run():<span class="built_in">string</span>{          		<span class="comment">// 父类的方法和子类一致时</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">${<span class="built_in">this</span>.name}</span>在运动`</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'zhangsan'</span>);</span><br><span class="line">p.run();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{       </span><br><span class="line">        <span class="built_in">super</span>(name);            <span class="comment">// 初始化父类的构造函数</span></span><br><span class="line">    }</span><br><span class="line">    run():<span class="built_in">string</span>{     		   <span class="comment">// 父类的方法和子类一致时，先从子类里面找这个方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">${<span class="built_in">this</span>.name}</span>在运动--子类`</span>;  </span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="title">work</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">${<span class="built_in">this</span>.name}</span>在工作`</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Web(<span class="string">'lisi'</span>);</span><br><span class="line">w.work();	</span><br><span class="line">w.run();	</span><br></pre></td></tr></tbody></table></figure>

<h5 id="4-3-类里面的修饰符-pubic-protected-private"><a href="#4-3-类里面的修饰符-pubic-protected-private" class="headerlink" title="4.3 类里面的修饰符(pubic/protected/private)"></a>4.3 类里面的修饰符(pubic/protected/private)</h5><p>注意：属性不加修饰符  默认为公有(pubic)</p>
<ul>
<li><code>pubic</code>: 公有    在当前类里面、子类、类外面都可以访问</li>
</ul>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="keyword">public</span> name:<span class="built_in">string</span>;             <span class="comment">// 公有属性   </span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{       </span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    run():<span class="built_in">string</span>{          		</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">${<span class="built_in">this</span>.name}</span>在运动`</span>;   </span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类外部访问公有属性</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'hahaha'</span>); </span><br><span class="line">p.name;   							<span class="comment">// hahaha</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{       </span><br><span class="line">        <span class="built_in">super</span>(name);            </span><br><span class="line">    }</span><br><span class="line">    run():<span class="built_in">string</span>{     		   </span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">${<span class="built_in">this</span>.name}</span>在运动--子类`</span>;  </span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="title">work</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">${<span class="built_in">this</span>.name}</span>在工作`</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Web(<span class="string">'lisi'</span>);</span><br><span class="line">w.work();						<span class="comment">// lisi在工作</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><code>protected</code>: 保护类型   在当前类、子类里面可以访问，在类外部没法访问</li>
</ul>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="keyword">protected</span> name:<span class="built_in">string</span>;             <span class="comment">// 保护类型   </span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{       </span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    run():<span class="built_in">string</span>{          		</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">${<span class="built_in">this</span>.name}</span>在运动`</span>;   </span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'hahaha'</span>); </span><br><span class="line">p.name;   							<span class="comment">// 报错，在类外部没法访问保护类型的属性</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{       </span><br><span class="line">        <span class="built_in">super</span>(name);            </span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="title">work</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">${<span class="built_in">this</span>.name}</span>在工作`</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Web(<span class="string">'lisi001'</span>);</span><br><span class="line">w.work();						<span class="comment">// lisi001在工作</span></span><br><span class="line">w.run()							<span class="comment">// lisi001在运动</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><code>private</code>: 私有    在当前类里面可以访问，在子类和类外部都没法访问</li>
</ul>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="keyword">private</span> name:<span class="built_in">string</span>;             <span class="comment">// 私有类型   </span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{       </span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    run():<span class="built_in">string</span>{          		</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">${<span class="built_in">this</span>.name}</span>在运动`</span>;   </span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'hahaha'</span>); </span><br><span class="line">p.name;   							<span class="comment">// 报错，在类外部没法访问私有类型的属性</span></span><br><span class="line">p.run();							<span class="comment">// 在当前类的方法里面可以调用这个属性</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{       </span><br><span class="line">        <span class="built_in">super</span>(name);            </span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="title">work</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="comment">// 报错，在子类里面没法访问私有类型的属性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">${<span class="built_in">this</span>.name}</span>在工作`</span>;</span><br><span class="line">    }</span><br><span class="line">}						</span><br></pre></td></tr></tbody></table></figure>

<h5 id="4-4-静态属性-静态方法"><a href="#4-4-静态属性-静态方法" class="headerlink" title="4.4 静态属性 静态方法"></a>4.4 静态属性 静态方法</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="keyword">public</span> name:<span class="built_in">string</span>; </span><br><span class="line">    <span class="keyword">public</span> age:<span class="built_in">number</span> = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态属性</span></span><br><span class="line">    <span class="keyword">static</span> sex = <span class="string">'男'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{       </span><br><span class="line">        <span class="built_in">this</span>.name = name           </span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>{ 							 <span class="comment">// 实例方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">${<span class="built_in">this</span>.name}</span>在运动`</span>;</span><br><span class="line">    }</span><br><span class="line">     <span class="function"><span class="title">work</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">${<span class="built_in">this</span>.name}</span>在工作`</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">print</span>(<span class="params"></span>)</span>{                  <span class="comment">// 静态方法，里面没法直接调用类里面的属性</span></span><br><span class="line">        alert(<span class="string">'print方法'</span> + <span class="built_in">this</span>.age) ;   <span class="comment">// age报错</span></span><br><span class="line">        alert(<span class="string">'print方法'</span> + Person.sex) ;   </span><br><span class="line">    }</span><br><span class="line">}	</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'李四'</span>); </span><br><span class="line">p.run();	</span><br><span class="line"></span><br><span class="line">Person.print();						<span class="comment">// 调用静态方法</span></span><br><span class="line">Person.sex;							<span class="comment">// 调用静态属性</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="4-5-抽象类和继承多态"><a href="#4-5-抽象类和继承多态" class="headerlink" title="4.5 抽象类和继承多态"></a>4.5 抽象类和继承多态</h5><ul>
<li>多态：父类定义一个方法不去实现，让继承它的子类去实现，每一个子类有不同的表现。多态属于继承</li>
</ul>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>{</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;             </span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{       </span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    eat():<span class="built_in">string</span>{          <span class="comment">//  吃什么 由继承它的子类去实现，每一个子类的表现不一样	</span></span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'吃的方法'</span>);   </span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">						</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>{</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{       </span><br><span class="line">        <span class="built_in">super</span>(name);            </span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">${<span class="built_in">this</span>.name}</span>吃狗粮`</span>;</span><br><span class="line">    }</span><br><span class="line">}	</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>{</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{       </span><br><span class="line">        <span class="built_in">super</span>(name);            </span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">${<span class="built_in">this</span>.name}</span>吃老鼠`</span>;</span><br><span class="line">    }</span><br><span class="line">}	</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>抽象类: 它是提供其他类继承的基类，不能直接被实例化</p>
<p>用<code>abstract</code>关键字定义抽象类和抽象方法，抽象类中的抽象方法不包含具体实现并且必须在派生类中实现</p>
<p>abstract抽象方法只能放在抽象类里面</p>
</li>
</ul>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象类和抽象方法用来定义标准  例如：Animal这个类要求它的子类必须包含eat方法</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>{</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;             </span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{       </span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">abstract</span> eat():<span class="built_in">any</span>;   	<span class="comment">// 抽象方法不包含具体实现并且必须在派生类中实现</span></span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>{</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'其他方法可以不实现'</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Animal();      <span class="comment">// 报错，抽象类不能直接被实例化</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>{</span><br><span class="line">     <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{       </span><br><span class="line">        <span class="built_in">super</span>(name);            </span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 抽象类里面的子类必须实现抽象类里面的方法</span></span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+<span class="string">'吃狗粮'</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> Dog(<span class="string">'大黄'</span>);</span><br><span class="line">d.eat(); 						<span class="comment">// 大黄吃狗粮</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="5-接口"><a href="#5-接口" class="headerlink" title="5.接口"></a>5.接口</h3><h5 id="5-1-属性接口：对json的约束"><a href="#5-1-属性接口：对json的约束" class="headerlink" title="5.1 属性接口：对json的约束"></a>5.1 属性接口：对json的约束</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// ts中自定义方法传入参数，对json进行约束</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelInfo:{label:<span class="built_in">string</span>}</span>):<span class="title">void</span> </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'printLabel'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">printLabel(<span class="string">'hahaha'</span>);    	<span class="comment">// 错误写法</span></span><br><span class="line">printLabel({<span class="attr">name</span>:<span class="string">'张三'</span>});   <span class="comment">// 错误写法</span></span><br><span class="line"></span><br><span class="line">printLabel({<span class="attr">label</span>:<span class="string">'张三'</span>});   <span class="comment">// 正确写法</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 对传入的批量方法进行约束</span></span><br><span class="line"><span class="keyword">interface</span> FullName{</span><br><span class="line">    <span class="attr">firstName</span>:<span class="built_in">string</span>;		<span class="comment">// 注意;结尾</span></span><br><span class="line">    secondName:<span class="built_in">string</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printName</span>(<span class="params">name:FullName</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(name.firstName+<span class="string">'---'</span>+name.secondName);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">printName(<span class="string">'123'</span>);			<span class="comment">// 错误写法</span></span><br><span class="line">printName({	</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,					<span class="comment">// age会报错，按照接口要求传入参数</span></span><br><span class="line">    <span class="attr">firstName</span>:<span class="string">'张'</span>，</span><br><span class="line">    secondName：<span class="string">'三'</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建议外部先定义好对象再传入</span></span><br><span class="line"><span class="keyword">var</span> obj = {					<span class="comment">// 传入的参数必须包含firstName,secondName		</span></span><br><span class="line">    <span class="attr">firstName</span>:<span class="string">'张'</span>,</span><br><span class="line">    secondName：<span class="string">'三'</span></span><br><span class="line">}</span><br><span class="line">printName(obj);				</span><br></pre></td></tr></tbody></table></figure>

<h6 id="接口-可选属性"><a href="#接口-可选属性" class="headerlink" title="接口: 可选属性"></a>接口: 可选属性</h6><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> FullName{</span><br><span class="line">    <span class="attr">firstName</span>:<span class="built_in">string</span>;		</span><br><span class="line">    secondName?:<span class="built_in">string</span>; 			   <span class="comment">// secondName可传可不传</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">name:FullName</span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数的顺序可以不一样</span></span><br><span class="line">getName({					</span><br><span class="line">    <span class="comment">// secondName：'secondName‘,	      // secondName可传可不传</span></span><br><span class="line">    <span class="attr">firstName</span>:<span class="string">'firstName'</span></span><br><span class="line">})				</span><br></pre></td></tr></tbody></table></figure>

<h5 id="5-2-函数类型接口"><a href="#5-2-函数类型接口" class="headerlink" title="5.2 函数类型接口"></a>5.2 函数类型接口</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 加密的函数类型接口</span></span><br><span class="line"><span class="keyword">interface</span> encrypt{</span><br><span class="line">    (key:<span class="built_in">string</span>,<span class="attr">value</span>:<span class="built_in">string</span>):<span class="built_in">string</span>;			  </span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> md5:encrypt = <span class="function"><span class="keyword">function</span>(<span class="params">key:<span class="built_in">string</span>,value:<span class="built_in">string</span></span>):<span class="title">string</span></span>{</span><br><span class="line">    <span class="keyword">return</span> key+value;</span><br><span class="line">}	</span><br><span class="line"></span><br><span class="line">md5(<span class="string">'name'</span>,<span class="string">'zhangsan'</span>)</span><br></pre></td></tr></tbody></table></figure>

<h5 id="5-3-可索引接口：数组、对象的约束-不常用"><a href="#5-3-可索引接口：数组、对象的约束-不常用" class="headerlink" title="5.3 可索引接口：数组、对象的约束(不常用)"></a>5.3 可索引接口：数组、对象的约束(不常用)</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 对数组的约束</span></span><br><span class="line"><span class="keyword">interface</span> UserArr{</span><br><span class="line">    [index:<span class="built_in">number</span>]:<span class="built_in">string</span>    <span class="comment">//	索引必须为数字</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> arr:UserArr = [<span class="string">'1424'</span>,<span class="string">'55584'</span>];</span><br><span class="line"><span class="keyword">var</span> arr:UserArr = [<span class="string">'aaa'</span>,<span class="string">'bbb'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对对象的约束</span></span><br><span class="line"><span class="keyword">interface</span> UserObj{</span><br><span class="line">    [index:<span class="built_in">string</span>]:<span class="built_in">string</span>    <span class="comment">//	index为string类型</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> arr:UserObj = {<span class="attr">name</span>:<span class="string">'zhangsan'</span>};</span><br></pre></td></tr></tbody></table></figure>

<h5 id="5-4-类类型接口：对类的约束"><a href="#5-4-类类型接口：对类的约束" class="headerlink" title="5.4 类类型接口：对类的约束"></a>5.4 类类型接口：对类的约束</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal{</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    eat(str:<span class="built_in">string</span>):<span class="built_in">void</span>;</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="title">implements</span> <span class="title">Animal</span></span>{</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+<span class="string">'吃粮食'</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> Dog(<span class="string">'小黑'</span>);</span><br><span class="line">d.eat();</span><br></pre></td></tr></tbody></table></figure>

<h5 id="5-5-接口扩展：接口可以继承接口"><a href="#5-5-接口扩展：接口可以继承接口" class="headerlink" title="5.5 接口扩展：接口可以继承接口"></a>5.5 接口扩展：接口可以继承接口</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal{</span><br><span class="line">    eat():<span class="built_in">void</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">interface</span> Person <span class="keyword">extends</span> Animal{</span><br><span class="line">    work():<span class="built_in">void</span>;</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">programmer</span></span>{</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="title">coding</span>(<span class="params">code:<span class="built_in">string</span></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+code)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">programmer</span>  <span class="title">implements</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+<span class="string">'吃馒头'</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="title">work</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+<span class="string">'在工作'</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Web(<span class="string">'zhangsan'</span>);</span><br><span class="line">w.eat();</span><br><span class="line">w.work();</span><br><span class="line">w.coding(<span class="string">'写代码'</span>);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="6-泛型"><a href="#6-泛型" class="headerlink" title="6.泛型"></a>6.泛型</h3><p>解决类、接口、方法的复用性以及对不特定数据类型的支持(类型校验)</p>
<h5 id="6-1-泛型函数"><a href="#6-1-泛型函数" class="headerlink" title="6.1 泛型函数"></a>6.1 泛型函数</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// T表示泛型，具体什么类型是调用这个方法的时候决定的</span></span><br><span class="line"><span class="comment">// 可以用任意大写字母表示泛型，但上下文必须保持一致</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T</span>):<span class="title">T</span></span>{</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">}</span><br><span class="line">getData&lt;<span class="built_in">number</span>&gt;(<span class="string">'12323'</span>);  	<span class="comment">// 错误写法</span></span><br><span class="line">getData&lt;<span class="built_in">number</span>&gt;(<span class="number">123</span>);		<span class="comment">// 正确写法</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="6-2-泛型类"><a href="#6-2-泛型类" class="headerlink" title="6.2 泛型类"></a>6.2 泛型类</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 普通类型，只适用于number类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinClass</span></span>{</span><br><span class="line">    <span class="keyword">public</span> list:<span class="built_in">number</span>[] = [];</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params">num:<span class="built_in">number</span></span>)</span>{</span><br><span class="line">        <span class="built_in">this</span>.list.push(num)</span><br><span class="line">    }</span><br><span class="line">    min():<span class="built_in">number</span>{</span><br><span class="line">        <span class="keyword">var</span> minNum = <span class="built_in">this</span>.list[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">this</span>.list.length;i++){</span><br><span class="line">            <span class="keyword">if</span>(minNum&gt;<span class="built_in">this</span>.list[i]){</span><br><span class="line">                minNum = <span class="built_in">this</span>.list[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> minNum;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> MinClass();</span><br><span class="line">m.add(<span class="number">10</span>);</span><br><span class="line">m.add(<span class="number">25</span>);</span><br><span class="line">m.add(<span class="number">5</span>);</span><br><span class="line">m.min();</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 类的泛型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinClass</span>&lt;<span class="title">T</span>&gt;</span>{</span><br><span class="line">    <span class="keyword">public</span> list:T[] = [];</span><br><span class="line">    add(value:T):<span class="built_in">void</span>{</span><br><span class="line">        <span class="built_in">this</span>.list.push(value);</span><br><span class="line">    }</span><br><span class="line">    min():T{</span><br><span class="line">        <span class="keyword">var</span> minNum = <span class="built_in">this</span>.list[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">this</span>.list.length;i++){</span><br><span class="line">            <span class="keyword">if</span>(minNum&gt;<span class="built_in">this</span>.list[i]){</span><br><span class="line">                minNum = <span class="built_in">this</span>.list[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> minNum;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> m1 = <span class="keyword">new</span> MinClass&lt;<span class="built_in">number</span>&gt;();   <span class="comment">// 实例化类，并且指定了类的T代表的类型是number</span></span><br><span class="line">m1.add(<span class="number">10</span>);</span><br><span class="line">m1.add(<span class="number">25</span>);</span><br><span class="line">m1.add(<span class="number">5</span>);</span><br><span class="line">m2.min();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m2 = <span class="keyword">new</span> MinClass&lt;<span class="built_in">string</span>&gt;();   <span class="comment">//指定了类的T代表的类型是string</span></span><br><span class="line">m2.add(<span class="string">'a'</span>);</span><br><span class="line">m2.add(<span class="string">'c'</span>);</span><br><span class="line">m2.add(<span class="string">'d'</span>);</span><br><span class="line">m2.min();</span><br></pre></td></tr></tbody></table></figure>

<h6 id="把类当成参数的泛型类"><a href="#把类当成参数的泛型类" class="headerlink" title="把类当成参数的泛型类"></a>把类当成参数的泛型类</h6><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlDb</span>&lt;<span class="title">T</span>&gt;</span>{</span><br><span class="line">    add(user:T):<span class="built_in">boolean</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>{</span><br><span class="line">    <span class="attr">username</span>:<span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">    password:<span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">params:{</span></span></span><br><span class="line"><span class="params"><span class="function">        username:<span class="built_in">string</span> | <span class="literal">undefined</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    	password:<span class="built_in">string</span> | <span class="literal">undefined</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    }</span>)</span>{</span><br><span class="line">        <span class="built_in">this</span>.username = params.username</span><br><span class="line">        <span class="built_in">this</span>.password = params.password</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> u = <span class="keyword">new</span> User({</span><br><span class="line">    username = <span class="string">'张三'</span>；</span><br><span class="line">    password = <span class="string">'123456'</span>;</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Db = <span class="keyword">new</span> MysqlDb&lt;User&gt;();</span><br><span class="line">Db.add(u);</span><br></pre></td></tr></tbody></table></figure>

<h5 id="6-3-泛型接口"><a href="#6-3-泛型接口" class="headerlink" title="6.3 泛型接口"></a>6.3 泛型接口</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 函数类型接口</span></span><br><span class="line"><span class="keyword">interface</span> CongigFn{</span><br><span class="line">    (value1:<span class="built_in">string</span>,<span class="attr">value2</span>:<span class="built_in">string</span>):<span class="built_in">string</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> setData:CongigFn = <span class="function"><span class="keyword">function</span>(<span class="params">value1:<span class="built_in">string</span>,value2:<span class="built_in">string</span></span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> value1+value2;</span><br><span class="line">}</span><br><span class="line">setData(<span class="string">'name'</span>,<span class="string">'张三'</span>);</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 泛型接口1</span></span><br><span class="line"><span class="keyword">interface</span> CongigFn{</span><br><span class="line">    &lt;T&gt;(value:T):T;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> getData:CongigFn = <span class="function"><span class="keyword">function</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T</span>):<span class="title">T</span></span>{</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">}</span><br><span class="line">getData&lt;<span class="built_in">string</span>&gt;(<span class="string">'name'</span>);		<span class="comment">//正确写法</span></span><br><span class="line">getData&lt;<span class="built_in">string</span>&gt;(<span class="number">123</span>);  			<span class="comment">//错误写法</span></span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 泛型接口2</span></span><br><span class="line"><span class="keyword">interface</span> CongigFn&lt;T&gt;{</span><br><span class="line">    (value:T):T;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>&lt;<span class="title">T</span>&gt;(<span class="params">value:T</span>):<span class="title">T</span></span>{</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> myGetDate:CongigFn&lt;<span class="built_in">string</span>&gt; = getData;</span><br><span class="line">myGetDate(<span class="string">'name'</span>);		<span class="comment">//正确写法</span></span><br><span class="line">myGetDate(<span class="number">20</span>);			<span class="comment">//错误写法</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="6-4-综合使用"><a href="#6-4-综合使用" class="headerlink" title="6.4 综合使用"></a>6.4 综合使用</h5><figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个泛型接口</span></span><br><span class="line"><span class="keyword">interface</span> DBI&lt;T&gt;{</span><br><span class="line">    add(info:T):<span class="built_in">boolean</span>;</span><br><span class="line">    update(info:T,<span class="attr">id</span>:<span class="built_in">number</span>):<span class="built_in">boolean</span>;</span><br><span class="line">    <span class="keyword">delete</span>(id:<span class="built_in">number</span>):<span class="built_in">boolean</span>;</span><br><span class="line">    get(id:<span class="built_in">number</span>):<span class="built_in">any</span>[];</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 定义一个操作MySQL数据库的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlDb</span>&lt;<span class="title">T</span>&gt; <span class="title">implements</span> <span class="title">DBI</span>&lt;<span class="title">T</span>&gt;</span>{		<span class="comment">// 注意:要实现泛型接口 这个类也应该是一个泛型类</span></span><br><span class="line">    add(info:T):<span class="built_in">boolean</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(info);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">	update(info:T,<span class="attr">id</span>:<span class="built_in">number</span>):<span class="built_in">boolean</span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">	<span class="keyword">delete</span>(id:<span class="built_in">number</span>):<span class="built_in">boolean</span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">	get(id:<span class="built_in">number</span>):<span class="built_in">any</span>[]{</span><br><span class="line">        <span class="keyword">var</span> list = [</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">title</span>:<span class="string">'xxx'</span>,</span><br><span class="line">                <span class="attr">desc</span>:<span class="string">'xxxww'</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">title</span>:<span class="string">'xxx'</span>,</span><br><span class="line">                <span class="attr">desc</span>:<span class="string">'xxxww'</span></span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 定义一个操作MsSQL数据库的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MsSQLDb</span>&lt;<span class="title">T</span>&gt; <span class="title">implements</span> <span class="title">DBI</span>&lt;<span class="title">T</span>&gt;</span>{		<span class="comment">// 注意:要实现泛型接口 这个类也应该是一个泛型类</span></span><br><span class="line">    add(info:T):<span class="built_in">boolean</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(info);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">	update(info:T,<span class="attr">id</span>:<span class="built_in">number</span>):<span class="built_in">boolean</span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">	<span class="keyword">delete</span>(id:<span class="built_in">number</span>):<span class="built_in">boolean</span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">	get(id:<span class="built_in">number</span>):<span class="built_in">any</span>[]{</span><br><span class="line">        <span class="keyword">var</span> list = [</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">title</span>:<span class="string">'xxx'</span>,</span><br><span class="line">                <span class="attr">desc</span>:<span class="string">'xxxww'</span></span><br><span class="line">            },</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">title</span>:<span class="string">'xxx'</span>,</span><br><span class="line">                <span class="attr">desc</span>:<span class="string">'xxxww'</span></span><br><span class="line">            }</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 操作用户表  定义一个user类和数据表做映射</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>{</span><br><span class="line">    <span class="attr">username</span>:<span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">    password:<span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> u = <span class="keyword">new</span> User();</span><br><span class="line">u.username = <span class="string">'zhangsan'</span></span><br><span class="line">u.password =<span class="string">'123456'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oMysql = <span class="keyword">new</span> MysqlDb&lt;User&gt;();		<span class="comment">// 类作为参数来约束数据传入的类型</span></span><br><span class="line">oMysql.add(u);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oMssql = <span class="keyword">new</span> MsSQLDb&lt;User&gt;();		<span class="comment">// 类作为参数来约束数据传入的类型</span></span><br><span class="line">oMssql.add(u);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取user表 id=4的数据</span></span><br><span class="line"><span class="keyword">var</span> data = oMysql.get(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="7-模块"><a href="#7-模块" class="headerlink" title="7.模块"></a>7.模块</h3><p>模块：外部模块，侧重代码的复用，一个模块里可能会有多个命名空间 </p>
<h5 id="7-1-模块导出的方式"><a href="#7-1-模块导出的方式" class="headerlink" title="7.1 模块导出的方式"></a>7.1 模块导出的方式</h5><p><code>export </code>：导出。可使用<code>{}</code>一次性暴露所有数据</p>
<p><code>import</code>：导入。使用<code>{}</code>引入模块，as可以简化名称</p>
<p><code>export default  </code>：默认导出。在模块中只能使用一次，import导入时不需要使用<code>{}</code></p>
<h3 id="8-命名空间-namespace"><a href="#8-命名空间-namespace" class="headerlink" title="8.命名空间(namespace)"></a>8.命名空间(namespace)</h3><p>命名空间：内部模块，主要用于组织代码，避免命名冲突</p>
<p>注意：在命名空间外部使用空间内的方法时，需要先使用export将方法暴露出来，再通过命名空间<code>.</code>的形式访问空间内的方法或类</p>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> A{</span><br><span class="line">    <span class="keyword">interface</span> Animal{</span><br><span class="line">        <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">        eat(str:<span class="built_in">string</span>):<span class="built_in">void</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="title">implements</span> <span class="title">Animal</span></span>{</span><br><span class="line">        <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+<span class="string">'吃狗粮'</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="title">implements</span> <span class="title">Animal</span></span>{</span><br><span class="line">        <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+<span class="string">'吃猫粮'</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> A.Dog(<span class="string">'小黑'</span>);</span><br><span class="line">d.eat();</span><br><span class="line">    </span><br><span class="line"><span class="keyword">namespace</span> B{</span><br><span class="line">    <span class="keyword">interface</span> Animal{</span><br><span class="line">        <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">        eat(str:<span class="built_in">string</span>):<span class="built_in">void</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="title">implements</span> <span class="title">Animal</span></span>{</span><br><span class="line">        <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+<span class="string">'吃狗粮'</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="title">implements</span> <span class="title">Animal</span></span>{</span><br><span class="line">        <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)</span>{</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        }</span><br><span class="line">        <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name+<span class="string">'吃猫粮'</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> B.Dog(<span class="string">'小黑'</span>);</span><br><span class="line">d.eat();</span><br></pre></td></tr></tbody></table></figure>

<h3 id="9-装饰器"><a href="#9-装饰器" class="headerlink" title="9.装饰器"></a>9.装饰器</h3><p>通俗讲装饰器就是一个<code>方法</code>，可以注入到类、方法、属性参数上来扩展类、属性、方法、参数的功能</p>
<p>装饰器写法：普通装饰器（无参数），装饰器工厂（可传参）</p>
<p>装饰器执行顺序：属性装饰器 &gt; 方法装饰器 &gt; 方法参数装饰器 &gt; 类装饰器</p>
<p>​                               如果同一种装饰器有多个，先执行后面的。（由后到前）</p>
<h5 id="9-1-类装饰器"><a href="#9-1-类装饰器" class="headerlink" title="9.1 类装饰器"></a>9.1 类装饰器</h5><p>类装饰器在类声明之前被声明（紧靠着类声明）。类装饰器应用于类构造函数，可以用来监视、修改或替换类定义</p>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 普通装饰器（无参数）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params:<span class="built_in">any</span></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(params);    	<span class="comment">// params是当前类  HttpClient</span></span><br><span class="line">    </span><br><span class="line">    params.prototype.apiUrl=<span class="string">'动态扩展的属性'</span>;</span><br><span class="line">    params.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'扩展的方法'</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@logClass</span>				<span class="comment">// 调用装饰器   前面加@，后面不需要加分号</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span></span>{</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="title">getData</span>(<span class="params"></span>)</span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> h:<span class="built_in">any</span> = <span class="keyword">new</span> HttpClient();</span><br><span class="line"><span class="built_in">console</span>.log(h.apiUrl)</span><br><span class="line">h.run();</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 装饰器工厂（可传参）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params:<span class="built_in">string</span></span>)</span>{  		</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:<span class="built_in">any</span></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(target);		<span class="comment">// target是当前类  HttpClient</span></span><br><span class="line">        <span class="built_in">console</span>.log(params);		<span class="comment">// params是传入的值  http://www.baidu.com</span></span><br><span class="line">        </span><br><span class="line">        target.prototype.apiUrl=params;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@logClass</span>(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span></span>{</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="title">getData</span>(<span class="params"></span>)</span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> h:<span class="built_in">any</span> = <span class="keyword">new</span> HttpClient();</span><br><span class="line"><span class="built_in">console</span>.log(h.apiUrl);</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数重载</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">target:<span class="built_in">any</span></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(target);      			<span class="comment">// target是当前类  HttpClient</span></span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">target</span></span>{</span><br><span class="line">        <span class="attr">apiUrl</span>:<span class="built_in">any</span> = <span class="string">'我是修改后的数据'</span>;</span><br><span class="line">        <span class="function"><span class="title">getData</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="built_in">this</span>.apiUrl = <span class="built_in">this</span>.apiUrl+<span class="string">'----'</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.apiUrl);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@logClass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span></span>{ </span><br><span class="line">    <span class="keyword">public</span> apiUrl:<span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">this</span>.apiUrl = <span class="string">'构造函数里面的apiUrl'</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="title">getData</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.apiUrl);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> h:<span class="built_in">any</span> = <span class="keyword">new</span> HttpClient();</span><br><span class="line">h.getData();</span><br></pre></td></tr></tbody></table></figure>

<h5 id="9-2-属性装饰器"><a href="#9-2-属性装饰器" class="headerlink" title="9.2 属性装饰器"></a>9.2 属性装饰器</h5><p>在运行时传入2个参数：</p>
<ul>
<li><p>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</p>
</li>
<li><p>属性的名称</p>
</li>
</ul>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 类装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logClass</span>(<span class="params">params:<span class="built_in">string</span></span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:<span class="built_in">any</span></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(target);			<span class="comment">// target是当前类  HttpClient</span></span><br><span class="line">        <span class="built_in">console</span>.log(params);			<span class="comment">// params是传入的值  xxx</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logProperty</span>(<span class="params">params:<span class="built_in">any</span></span>)</span>{		<span class="comment">// params是传入的值  http://www.baidu.com</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:<span class="built_in">any</span>,attr:<span class="built_in">any</span></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(target);		<span class="comment">// target是类的原型对象 target.prototype</span></span><br><span class="line">        <span class="built_in">console</span>.log(attr);			<span class="comment">// attr是属性名称</span></span><br><span class="line">        target[attr] = params;		<span class="comment">// 在原型对象上可以扩展当前类的属性和方法</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@logClass</span>(<span class="string">'xxx'</span>)			<span class="comment">// 调用装饰器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span></span>{</span><br><span class="line">    <span class="meta">@logProperty</span>(<span class="string">'http://www.baidu.com'</span>)		<span class="comment">// 调用属性装饰器</span></span><br><span class="line">    <span class="keyword">public</span> url:<span class="built_in">any</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="title">getData</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.url);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> h:<span class="built_in">any</span> = <span class="keyword">new</span> HttpClient();</span><br><span class="line">h.getData();</span><br></pre></td></tr></tbody></table></figure>

<h5 id="9-3-方法装饰器"><a href="#9-3-方法装饰器" class="headerlink" title="9.3 方法装饰器"></a>9.3 方法装饰器</h5><p>应用于方法的属性描述符上，可以用来监视、修改或替换方法定义</p>
<p>方法装饰器在运行时传入3个参数：</p>
<ul>
<li><p>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</p>
</li>
<li><p>方法的名称</p>
</li>
<li><p>方法的属性描述符</p>
</li>
</ul>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 方法装饰器1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logMethod</span>(<span class="params">params:<span class="built_in">any</span></span>)</span>{		</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:<span class="built_in">any</span>,methodName:<span class="built_in">any</span>,desc:<span class="built_in">any</span></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(target);		<span class="comment">// target是类的原型对象</span></span><br><span class="line">        <span class="built_in">console</span>.log(methodName);	<span class="comment">// methodName是方法名称</span></span><br><span class="line">        <span class="built_in">console</span>.log(desc);			<span class="comment">// desc是方法描述信息，里面的value包含当前的方法getData</span></span><br><span class="line">        target.apiUrl = <span class="string">'xxx'</span>;		<span class="comment">// 在原型对象上可以扩展当前类的属性</span></span><br><span class="line">        target.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{	<span class="comment">// 在原型对象上可以扩展当前类的方法</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'run'</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span></span>{</span><br><span class="line">    <span class="keyword">public</span> url:<span class="built_in">any</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@logMethod</span>(<span class="string">'http://www.baidu.com'</span>);		<span class="comment">// 调用方法装饰器</span></span><br><span class="line">    <span class="function"><span class="title">getData</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.url);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> h:<span class="built_in">any</span> = <span class="keyword">new</span> HttpClient();</span><br><span class="line">h.apiUrl;</span><br><span class="line">h.run();</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 方法装饰器2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logMethod</span>(<span class="params">params:<span class="built_in">any</span></span>)</span>{		<span class="comment">// params是传入的值  http://www.baidu.com</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:<span class="built_in">any</span>,methodName:<span class="built_in">any</span>,desc:<span class="built_in">any</span></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(target);</span><br><span class="line">        <span class="built_in">console</span>.log(methodName);</span><br><span class="line">        <span class="built_in">console</span>.log(desc.value);  <span class="comment">// 当前的方法getData</span></span><br><span class="line">        <span class="comment">// 修改装饰器的方法		将装饰器方法里面传入的参数改为string类型</span></span><br><span class="line">        <span class="keyword">var</span> oMethod = desc.value;	<span class="comment">// 保存当前的方法</span></span><br><span class="line">        desc.value = <span class="function"><span class="keyword">function</span>(<span class="params">...args:<span class="built_in">any</span>[]</span>)</span>{</span><br><span class="line">           args = args.map(<span class="function"><span class="params">value</span> =&gt;</span> {</span><br><span class="line">               <span class="keyword">return</span> <span class="built_in">String</span>(value);</span><br><span class="line">           })</span><br><span class="line">           <span class="built_in">console</span>.log(args);</span><br><span class="line">           oMethod.apply(<span class="built_in">this</span>,args);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span></span>{</span><br><span class="line">    <span class="keyword">public</span> url:<span class="built_in">any</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@logMethod</span>(<span class="string">'http://www.baidu.com'</span>);		<span class="comment">// 调用方法装饰器</span></span><br><span class="line">    <span class="function"><span class="title">getData</span>(<span class="params">...args:<span class="built_in">any</span>[]</span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(args);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'getData里面的方法'</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> h = <span class="keyword">new</span> HttpClient();</span><br><span class="line">h.getData(<span class="number">123</span>,<span class="string">'xxx'</span>);</span><br></pre></td></tr></tbody></table></figure>

<h5 id="9-4-方法参数装饰器"><a href="#9-4-方法参数装饰器" class="headerlink" title="9.4 方法参数装饰器"></a>9.4 方法参数装饰器</h5><p>可以使用方法参数装饰器为类的原型增加一些元素数据</p>
<p>在运行时传入3个参数：</p>
<ul>
<li><p>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象</p>
</li>
<li><p>方法的名称</p>
</li>
<li><p>参数在函数参数列表中的索引</p>
</li>
</ul>
<figure class="highlight ts"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logParams</span>(<span class="params">params:<span class="built_in">any</span></span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target:<span class="built_in">any</span>,methodName:<span class="built_in">any</span>,paramsIndex:<span class="built_in">any</span></span>)</span>{</span><br><span class="line">        <span class="built_in">console</span>.log(params);		<span class="comment">// params是传入的值  xxx</span></span><br><span class="line">        <span class="built_in">console</span>.log(target);		<span class="comment">// target是类的原型对象</span></span><br><span class="line">        <span class="built_in">console</span>.log(methodName);	<span class="comment">// methodName是方法名称</span></span><br><span class="line">        <span class="built_in">console</span>.log(paramsIndex); 	<span class="comment">// paramsIndex是参数索引</span></span><br><span class="line">        target.apiUrl = params;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span></span>{</span><br><span class="line">    <span class="keyword">public</span> url:<span class="built_in">any</span> | <span class="literal">undefined</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="title">getData</span>(<span class="params"><span class="meta">@logParams</span>(<span class="string">'xxx'</span>) uuid:<span class="built_in">any</span></span>)</span>{	<span class="comment">// 调用方法参数装饰器</span></span><br><span class="line">        <span class="built_in">console</span>.log(uuid);		<span class="comment">// 123456</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> h = <span class="keyword">new</span> HttpClient();</span><br><span class="line">h.getData(<span class="number">123456</span>);		</span><br><span class="line">h.apiUrl;</span><br></pre></td></tr></tbody></table></figure>

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
</search>
