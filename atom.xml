<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Augenstern_Y&#39;s blog</title>
  
  
  <link href="https://a08-k.github.io/atom.xml" rel="self"/>
  
  <link href="https://a08-k.github.io/"/>
  <updated>2021-05-11T05:42:11.388Z</updated>
  <id>https://a08-k.github.io/</id>
  
  <author>
    <name>Augenstern_Y</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Github Actions 实现 Hexo的CICD</title>
    <link href="https://a08-k.github.io/posts/422af2d5.html"/>
    <id>https://a08-k.github.io/posts/422af2d5.html</id>
    <published>2021-05-11T05:15:41.000Z</published>
    <updated>2021-05-11T05:42:11.388Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Github-Actions-实现-Hexo的CICD"><a href="#Github-Actions-实现-Hexo的CICD" class="headerlink" title="Github Actions 实现 Hexo的CICD"></a>Github Actions 实现 Hexo的CICD</h2><h4 id="一、准备仓库"><a href="#一、准备仓库" class="headerlink" title="一、准备仓库"></a>一、准备仓库</h4><ul><li><p>Private repo ： blog </p><ul><li>用来存放 Hexo 博客源码</li></ul></li><li><p>Public repo ： <code>用户名.github.io</code></p><ul><li>用来存放 public 静态页面。最好是空的，当然是你现在的hexo博客也可以。</li></ul></li><li><p>将 Private repo clone 到本地</p></li></ul><h4 id="二、准备ssh-key"><a href="#二、准备ssh-key" class="headerlink" title="二、准备ssh key"></a>二、准备ssh key</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"Github邮箱地址"</span> -f ~/.ssh/github-actions-deploy</span><br><span class="line">或</span><br><span class="line">ssh-keygen -f ~/.ssh/github-actions-deploy</span><br></pre></td></tr></tbody></table></figure><ul><li><code>github-actions-deploy.pub</code> — 公钥文件</li><li><code>github-actions-deploy</code> — 私钥文件</li></ul><h4 id="三、配置-GitHub-仓库"><a href="#三、配置-GitHub-仓库" class="headerlink" title="三、配置 GitHub 仓库"></a>三、配置 GitHub 仓库</h4><h5 id="配置用户名-github-io-公有仓库"><a href="#配置用户名-github-io-公有仓库" class="headerlink" title="配置用户名.github.io 公有仓库"></a>配置用户名.github.io 公有仓库</h5><ul><li>按照 <code>Settings</code>-&gt;<code>Deploye keys</code>-&gt;<code>Add deploy key</code>，进行公钥添加。<ul><li>Title ：<code>HEXO_DEPLOY_PUB</code>(自定义)</li><li>Key：<code>github-actions-deploy.pub</code> 文件中的内容</li><li>注意：必须勾上 <code>Allow write access</code></li></ul></li></ul><h5 id="配置blog私有仓库"><a href="#配置blog私有仓库" class="headerlink" title="配置blog私有仓库"></a>配置blog私有仓库</h5><ul><li>按照<code>Settings</code>-&gt;<code>Secrets</code> -&gt; <code>Add a new secret</code>，进行私钥添加。<ul><li>Name：<code>ACTION_DEPLOY_KEY</code></li><li>Value：<code>github-actions-deploy</code>文件中的内容</li></ul></li></ul><h4 id="四、使用Hexo创建博客"><a href="#四、使用Hexo创建博客" class="headerlink" title="四、使用Hexo创建博客"></a>四、使用Hexo创建博客</h4><ul><li>使用 npm 安装 Hexo</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装结果</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></tbody></table></figure><ul><li>初始化：Hexo安装完成后，在自定义文件夹下输入以下命令：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;file&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;file&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure><ul><li>在文件夹下启动hexo服务</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server  或  hexo s</span><br></pre></td></tr></tbody></table></figure><ul><li>安装插件</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure><ul><li>在 Hexo 项目根目录配置文件<code>_config.yaml</code>中配置</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">url: http://用户名.github.io</span><br><span class="line">root: /</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:Github用户名/Github用户名.github.io.git  <span class="comment"># Public repo（SSH url）</span></span><br><span class="line">  branch: main</span><br></pre></td></tr></tbody></table></figure><ul><li><p>自动部署网站：</p><p>执行下列的其中一个命令,让<code>Hexo</code>在生成完毕后自动部署网站，两个命令的作用是相同的。</p></li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --deploy</span><br><span class="line">或</span><br><span class="line">hexo deploy --generate</span><br></pre></td></tr></tbody></table></figure><p>​       上面两个命令可以简写为:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br><span class="line">或</span><br><span class="line">hexo d -g</span><br></pre></td></tr></tbody></table></figure><h4 id="五、创建Workflow"><a href="#五、创建Workflow" class="headerlink" title="五、创建Workflow"></a>五、创建Workflow</h4><p>首先在 <code>Private repo</code> 下创建一个新文件：<code>.github/workflows/deploy.yml</code>（文件名可以自定义，但是一定要放在 <code>.github/workflows</code> 目录下）或者 在 <code>Private repo</code> 仓库的<code>Actions</code>选项卡下点击<code>Set up this workflow</code>新建<code>workflow</code>，编写如下配置：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># workflow name</span></span><br><span class="line">name: Deploy Blog</span><br><span class="line"></span><br><span class="line">on: [push] <span class="comment"># 当有新push时运行</span></span><br><span class="line"><span class="comment">#on:</span></span><br><span class="line">  <span class="comment">#push:</span></span><br><span class="line">    <span class="comment">#branches:</span></span><br><span class="line">      <span class="comment">#- main</span></span><br><span class="line"></span><br><span class="line">env:</span><br><span class="line">  TZ: Asia/Shanghai</span><br><span class="line">  </span><br><span class="line"><span class="built_in">jobs</span>:</span><br><span class="line">  build:</span><br><span class="line">   <span class="comment"># 定义运行环境</span></span><br><span class="line">    runs-on: ubuntu-latest   <span class="comment"># 在最新版的Ubuntu系统下运行</span></span><br><span class="line">strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        node-version: [12.x]</span><br><span class="line">        </span><br><span class="line">    steps:</span><br><span class="line">      - name: Checkout  <span class="comment"># 将仓库内main分支的内容下载到工作目录</span></span><br><span class="line">        uses: actions/checkout@v2   <span class="comment"># 脚本来自 https://github.com/actions/checkout</span></span><br><span class="line">          </span><br><span class="line">      - name: Use Node.js <span class="variable">${{ matrix.node-version }</span>}   <span class="comment"># 配置Node环境</span></span><br><span class="line">        uses: actions/setup-node@v1   <span class="comment"># 配置脚本来自 https://github.com/actions/setup-node</span></span><br><span class="line">        with:</span><br><span class="line">          node-version: <span class="variable">${{ matrix.node-version }</span>}</span><br><span class="line"></span><br><span class="line">  <span class="comment">#- name: Cache node modules</span></span><br><span class="line">  <span class="comment">#uses: actions/cache@v1</span></span><br><span class="line">  <span class="comment">#with:</span></span><br><span class="line">      <span class="comment">#path: ~/.npm</span></span><br><span class="line">      <span class="comment">#key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}</span></span><br><span class="line"></span><br><span class="line">      - name: Setup Hexo</span><br><span class="line">        env:</span><br><span class="line">          ACTION_DEPLOY_KEY: <span class="variable">${{secrets.ACTION_DEPLOY_KEY}</span>}</span><br><span class="line">        run: |</span><br><span class="line">          <span class="comment"># set up private key for deploy</span></span><br><span class="line">          mkdir -p ~/.ssh/</span><br><span class="line">          <span class="built_in">echo</span> <span class="string">"<span class="variable">$ACTION_DEPLOY_KEY</span>"</span> &gt; ~/.ssh/id_rsa   <span class="comment"># 配置秘钥</span></span><br><span class="line">          chmod 600 ~/.ssh/id_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line"> </span><br><span class="line">      <span class="comment"># set git infomation</span></span><br><span class="line">  - name: Setup Git Infomation</span><br><span class="line">  run: |</span><br><span class="line">      git config --global user.email <span class="string">"xx@doe.com"</span>  <span class="comment"># 换成你自己的邮箱</span></span><br><span class="line">          git config --global user.name <span class="string">"xxx"</span>   <span class="comment"># 换成你自己的用户名</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># install dependencies</span></span><br><span class="line">  - name: Install dependencies</span><br><span class="line">        run: |</span><br><span class="line">          npm i -g hexo-cli   <span class="comment"># 安装hexo</span></span><br><span class="line">          npm i</span><br><span class="line">          </span><br><span class="line">      - name: Deploy Hexo</span><br><span class="line">        run: |</span><br><span class="line">           <span class="comment"># publish</span></span><br><span class="line">           hexo clean</span><br><span class="line">           hexo generate &amp;&amp; hexo deploy     <span class="comment"># 执行部署程序    </span></span><br><span class="line">       </span><br><span class="line">      <span class="comment"># Push 到 GitHub Pages</span></span><br><span class="line">      <span class="comment">#- name: Deploy Hexo To Github</span></span><br><span class="line">  <span class="comment">#run: |</span></span><br><span class="line">      <span class="comment">#cd public</span></span><br><span class="line">      <span class="comment">#rm -rf .git</span></span><br><span class="line">      <span class="comment">#echo blog.hvnobug.com &gt;&gt; CNAME</span></span><br><span class="line">      <span class="comment">#git init</span></span><br><span class="line">      <span class="comment">#git add -A &amp;&amp; git commit -m "Site updated: `date '+%Y-%m-%d %H:%Min:%S'`"</span></span><br><span class="line">      <span class="comment">#git push -f git@github.com:xxx/用户名.github.io.git main</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="教程" scheme="https://a08-k.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="hexo" scheme="https://a08-k.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo和github搭建个人博客</title>
    <link href="https://a08-k.github.io/posts/fbbf84ee.html"/>
    <id>https://a08-k.github.io/posts/fbbf84ee.html</id>
    <published>2021-05-10T07:02:37.000Z</published>
    <updated>2021-05-10T08:06:07.599Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="使用hexo和github搭建个人博客"><a href="#使用hexo和github搭建个人博客" class="headerlink" title="使用hexo和github搭建个人博客"></a>使用hexo和github搭建个人博客</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>要有一个github账号</li><li>安装node.js，npm依赖</li><li>安装git工具</li></ol><h3 id="为github设置SSH-Keys"><a href="#为github设置SSH-Keys" class="headerlink" title="为github设置SSH Keys"></a>为github设置SSH Keys</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"GitHub邮箱地址"</span></span><br></pre></td></tr></tbody></table></figure><p>在用户目录下找到<code>.ssh</code>文件夹，将里面后缀为<code>.pub</code>的文件内容复制</p><p>登录Github，点击setting进入—&gt; SSH and GPG keys —&gt; New SSH key，然后把你复制的内容放到Key中，Title中的内容可以随便填一个就行。</p><h3 id="创建github个人仓库"><a href="#创建github个人仓库" class="headerlink" title="创建github个人仓库"></a>创建github个人仓库</h3><p>仓库名为：用户名.github.io（必须是你的用户名，其它名称无效）</p><ol><li>点击New repository</li><li>输入Repository name，必需为<code>用户名.github.io</code>格式。</li><li>点击按钮Create repository</li><li>进入仓库用户名.github.io,点击setting，找到GitHub Pages模块</li><li>点击choose a theme选择一个页面主题</li><li>访问<a href="https://username.github.io就可以访问博客网站了/">https://username.github.io就可以访问博客网站了</a></li></ol><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>使用 npm 安装 Hexo：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证是否成功</span></span><br><span class="line">hexo -v   </span><br></pre></td></tr></tbody></table></figure><p>初始化仓库：在你自己指定位置创建项目文件夹blog（自定义），进入Blog根目录下执行</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;blog&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;blog&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></tbody></table></figure><p>然后本地运行：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new test_my_site  <span class="comment">#生成文章</span></span><br><span class="line">hexo g <span class="comment"># 生成对应的html</span></span><br><span class="line">hexo s <span class="comment"># 启动服务，本地预览</span></span><br></pre></td></tr></tbody></table></figure><p>打开浏览器访问 <a href="http://localhost/">http://localhost</a>:4000 即可看到内容</p><h3 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h3><p>修改配置文件_config.yml：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:Github用户名/Github用户名.github.io.git  <span class="comment"># Public repo（SSH url）</span></span><br><span class="line">  branch: main</span><br></pre></td></tr></tbody></table></figure><p>上传，发布网站：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save   <span class="comment">#安装插件</span></span><br><span class="line">hexo clean  <span class="comment"># 清除缓存和已生成的静态文件</span></span><br><span class="line">hexo g   <span class="comment"># 生成页面</span></span><br><span class="line">hexo d  <span class="comment"># 部署</span></span><br></pre></td></tr></tbody></table></figure><p>然后访问<a href="https://username.github.io就可以访问博客网站了/">https://username.github.io就可以访问博客网站了</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="教程" scheme="https://a08-k.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="hexo" scheme="https://a08-k.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>同一台电脑配置多个ssh秘钥</title>
    <link href="https://a08-k.github.io/posts/a02ab518.html"/>
    <id>https://a08-k.github.io/posts/a02ab518.html</id>
    <published>2021-04-30T02:58:24.000Z</published>
    <updated>2021-05-10T09:54:53.496Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="同一台电脑配置多个ssh秘钥"><a href="#同一台电脑配置多个ssh秘钥" class="headerlink" title="同一台电脑配置多个ssh秘钥"></a>同一台电脑配置多个ssh秘钥</h2><h3 id="1-删除git之前的配置项"><a href="#1-删除git之前的配置项" class="headerlink" title="1.删除git之前的配置项"></a>1.删除git之前的配置项</h3><p>查看git配置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --system --list   //系统级配置</span><br><span class="line">git config --global --list   //全局配置</span><br><span class="line">git config --<span class="built_in">local</span> --list    //当前项目配置</span><br></pre></td></tr></tbody></table></figure><p>删除配置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br></pre></td></tr></tbody></table></figure><h3 id="2-生成ssh-key"><a href="#2-生成ssh-key" class="headerlink" title="2.生成ssh key"></a>2.生成ssh key</h3><p>打开git bash 输入以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"邮箱"</span> -f ~/.ssh/id_rsa_01</span><br><span class="line">// -f后面是密钥路径和自定义的文件名id_rsa_01，邮箱可以相同也可以不同</span><br></pre></td></tr></tbody></table></figure><p>直接三次回车生成第一个ssh key</p><p>在当前用户目录的 .ssh 目录下会生成id_rsa_01私钥文件和 id_rsa_01.pub 公钥文件</p><p>登录GitHub，将 id_rsa_01.pub 公钥中的内容添加到里面的key输入框中</p><h3 id="3-生成第二个ssh-key"><a href="#3-生成第二个ssh-key" class="headerlink" title="3.生成第二个ssh key"></a>3.生成第二个ssh key</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"邮箱"</span> -f ~/.ssh/id_rsa_02</span><br><span class="line">// -f后面是密钥路径和自定义的文件名id_rsa_02，邮箱可以相同也可以不同</span><br></pre></td></tr></tbody></table></figure><p>直接三次回车生成第二个ssh key</p><p>在当前用户目录的 .ssh 目录下会生成id_rsa_02私钥文件和 id_rsa_02.pub 公钥文件</p><p>登录Gitee，将 id_rsa_02.pub 公钥中的内容添加到里面的key输入框中</p><h3 id="4-配置config文件"><a href="#4-配置config文件" class="headerlink" title="4.配置config文件"></a>4.配置config文件</h3><p>.ssh 目录下创建一个 config 文本文件，为每个账号配置一个Host节点，主要配置项说明：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host    　    <span class="comment">#　别名，描述参数的作用范围</span></span><br><span class="line">HostName　    <span class="comment">#　ip或域名</span></span><br><span class="line">IdentityFile　<span class="comment">#　私钥文件路径</span></span><br><span class="line">IdentitiesOnly <span class="comment"># 只接受SSH key 登录</span></span><br><span class="line">PreferredAuthentications　<span class="comment">#　认证方式，强制使用PublicKey验证</span></span><br><span class="line">User　        <span class="comment">#　用户名</span></span><br><span class="line">Port　        <span class="comment">#　ssh端口号，默认22</span></span><br></pre></td></tr></tbody></table></figure><p>执行命令：<code>vi config</code></p><p>输入字母<code>i</code>，进入编辑模式</p><p>config 文件内容：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ~/.ssh/config 配置多个git的ssh-key</span></span><br><span class="line"><span class="comment"># 第一个SSH Key</span></span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile ~/.ssh/github/id_rsa_01</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个SSH Key</span></span><br><span class="line">Host gitee.com</span><br><span class="line">    HostName gitee.com</span><br><span class="line">    IdentityFile  ~/.ssh/gitee/id_rsa_02</span><br><span class="line">    PreferredAuthentications publickey</span><br></pre></td></tr></tbody></table></figure><p>先按Esc，输入<code>:wq</code>，回车</p><p>在 git bash 中输入以下命令测试该用户的 SSH 密钥是否有效：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></tbody></table></figure><p>在 git bash 中输入以下命令测试该用户的 SSH 密钥是否有效：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com </span><br></pre></td></tr></tbody></table></figure><h3 id="5-为各自仓库配置不同的用户名和邮箱"><a href="#5-为各自仓库配置不同的用户名和邮箱" class="headerlink" title="5.为各自仓库配置不同的用户名和邮箱"></a>5.为各自仓库配置不同的用户名和邮箱</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> user.name <span class="string">'xx'</span> git config --<span class="built_in">local</span> user.email <span class="string">'xx@qq.com'</span> </span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习" scheme="https://a08-k.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="git" scheme="https://a08-k.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>vue创建项目</title>
    <link href="https://a08-k.github.io/posts/41222.html"/>
    <id>https://a08-k.github.io/posts/41222.html</id>
    <published>2021-04-12T09:48:15.000Z</published>
    <updated>2021-05-10T09:52:32.973Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="vue创建项目"><a href="#vue创建项目" class="headerlink" title="vue创建项目"></a>vue创建项目</h1><h3 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h3><h4 id="第一步：先安装node-js和npm。"><a href="#第一步：先安装node-js和npm。" class="headerlink" title="第一步：先安装node.js和npm。"></a>第一步：先安装node.js和npm。</h4><ol><li><p>官网下载node.js并安装（一直next）</p></li><li><p>输入<code>node -v</code> 和npm -v 查询node和npm的版本号</p></li><li><p>配置npm在安装全局模块时的路径和缓存cache的路径</p><ul><li>在node.js安装目录下新建两个文件夹 node_global和node_cache，然后在cmd命令下执行如下两个命令：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">"D:\Program Files\nodejs\node_global"</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">"D:\Program Files\nodejs\node_cache"</span></span><br></pre></td></tr></tbody></table></figure><ul><li>在“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量” -&gt; 系统变量中新建一个变量名为 “NODE_PATH”，值为“D:\nodejs\node_modules”(自定义)</li></ul><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322170537.png" alt="image-20210322170537657"></p><ul><li>编辑用户变量里的Path，将相应npm的路径改为：D:\Program Files\nodejs\node_global(自定义)</li></ul><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322170708.png" alt="image-20210322170708057"></p><ul><li>测试：在cmd命令下执行 <code>npm install webpack -g </code>，查看自定义的两个文件夹是否生效</li></ul></li></ol><h4 id="第二步：切换镜像源。"><a href="#第二步：切换镜像源。" class="headerlink" title="第二步：切换镜像源。"></a>第二步：切换镜像源。</h4><p>方法一：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局切换镜像源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 查看镜像源使用状态</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="comment"># 全局切换官方镜像源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></tbody></table></figure><p>方法二：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm  install  -g  cnpm  --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure><p>方法三：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装nrm</span></span><br><span class="line">npm install -g nrm</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出可供选择的源</span></span><br><span class="line">nrm ls (*表示正在使用的镜像源)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322164701.png" alt="image-20210322164700957"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到淘宝镜像源</span></span><br><span class="line">nrm use taobao</span><br><span class="line"><span class="comment"># 测试速度</span></span><br><span class="line">nrm <span class="built_in">test</span> npm</span><br></pre></td></tr></tbody></table></figure><h4 id="第三步：安装vue-cli-脚手架-。"><a href="#第三步：安装vue-cli-脚手架-。" class="headerlink" title="第三步：安装vue-cli 脚手架 。"></a>第三步：安装vue-cli 脚手架 。</h4><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装 vue-cli</span></span><br><span class="line">cnpm install vue-cli -g  </span><br></pre></td></tr></tbody></table></figure><p>使用 <code>vue -V</code> （注意 V 大写）查看是否安装成功</p><h4 id="第四步：安装webpack"><a href="#第四步：安装webpack" class="headerlink" title="第四步：安装webpack"></a>第四步：安装webpack</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></tbody></table></figure><p>输入 <code>webpack -v</code> 查看是否安装成功</p><h3 id="二、创建项目"><a href="#二、创建项目" class="headerlink" title="二、创建项目"></a>二、创建项目</h3><h4 id="方法一：手动创建"><a href="#方法一：手动创建" class="headerlink" title="方法一：手动创建"></a>方法一：手动创建</h4><h5 id="第一步：进入你想放置项目的文件夹，在命令提示窗口执行如下命令："><a href="#第一步：进入你想放置项目的文件夹，在命令提示窗口执行如下命令：" class="headerlink" title="第一步：进入你想放置项目的文件夹，在命令提示窗口执行如下命令："></a>第一步：进入你想放置项目的文件夹，在命令提示窗口执行如下命令：</h5><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack 项目名称</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322173629.png" alt="image-20210322173629131"></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Target directory exists. Continue? (Y/n) 直接回车默认(然后会下载 vue2.0模板，这里可能需要连代理)</span><br><span class="line"></span><br><span class="line">Project name (vue-test) 直接回车默认</span><br><span class="line"></span><br><span class="line">Project description (A Vue.js project) 直接回车默认</span><br><span class="line"></span><br><span class="line">Author 直接回车默认 &lt;br&gt;Install vue-router? yes</span><br><span class="line"></span><br><span class="line">Use ESLint to lint your code? No</span><br><span class="line"></span><br><span class="line">pick an eslint preset. 默认Standard</span><br><span class="line"></span><br><span class="line">setup unit tests with karma + mocha?No(单元测试不需要)</span><br><span class="line"></span><br><span class="line">setup e2e tests with Nightwatch?No(单元测试不需要)</span><br></pre></td></tr></tbody></table></figure><h5 id="第二步：进入到项目中，启动项目："><a href="#第二步：进入到项目中，启动项目：" class="headerlink" title="第二步：进入到项目中，启动项目："></a>第二步：进入到项目中，启动项目：</h5><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></tbody></table></figure><h4 id="方法二：图形化创建项目"><a href="#方法二：图形化创建项目" class="headerlink" title="方法二：图形化创建项目"></a>方法二：图形化创建项目</h4><h5 id="第一步：创建项目文件夹，启动ui界面"><a href="#第一步：创建项目文件夹，启动ui界面" class="headerlink" title="第一步：创建项目文件夹，启动ui界面"></a>第一步：创建项目文件夹，启动ui界面</h5><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></tbody></table></figure><h5 id="第二步：创建项目"><a href="#第二步：创建项目" class="headerlink" title="第二步：创建项目"></a>第二步：创建项目</h5><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322174601.png" alt="image-20210322174601023"></p><h5 id="第三步：填写项目名"><a href="#第三步：填写项目名" class="headerlink" title="第三步：填写项目名"></a>第三步：填写项目名</h5><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322174631.png" alt="image-20210322174630899"></p><p>第四步：选择预设</p><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322175042.png" alt="image-20210322175042373"></p><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322181201.png" alt="image-20210322181201293"></p><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322181216.png" alt="image-20210322181216513"></p><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322181038.png" alt="image-20210322181038141"></p><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322175214.png" alt="image-20210322175214259"></p><p>第五步：添加插件</p><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322175443.png" alt="image-20210322175443205"></p><p>第六步：项目依赖管理</p><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210322175518.png" alt="image-20210322175518272"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习" scheme="https://a08-k.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="vue" scheme="https://a08-k.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>git的基本使用方法</title>
    <link href="https://a08-k.github.io/posts/64569.html"/>
    <id>https://a08-k.github.io/posts/64569.html</id>
    <published>2021-04-09T08:39:28.000Z</published>
    <updated>2021-05-10T09:52:06.727Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="git的基本使用方法"><a href="#git的基本使用方法" class="headerlink" title="git的基本使用方法"></a>git的基本使用方法</h2><h4 id="一、git下载与安装"><a href="#一、git下载与安装" class="headerlink" title="一、git下载与安装"></a>一、git下载与安装</h4><ol><li><p>在git官网，根据自己电脑系统下载相应的安装包</p></li><li><p>一直点击next，直到出现install，点击install，安装完成后点击finish</p></li><li><p>检查git是否安装ok：</p><p>——Ctrl+r，在弹出框中输入cdm，弹出界面中输入git，回车</p><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210318175507.png" alt="image-20210318143942082"></p></li></ol><h4 id="二、环境配置"><a href="#二、环境配置" class="headerlink" title="二、环境配置"></a>二、环境配置</h4><p>​    1. 先在GitHub上注册一个账号，右键Git Bash进行环境配置</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置用户名</span></span><br><span class="line">git config --global user.name <span class="string">"username"</span>    //（ <span class="string">"username"</span>是自己的账户名）</span><br><span class="line"><span class="comment"># 配置邮箱</span></span><br><span class="line">git config --global user.email <span class="string">"username@email.com"</span>   //(<span class="string">"username@email.com"</span>注册账号时用的邮箱)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看配置是否OK</span></span><br><span class="line">git config --global --list </span><br></pre></td></tr></tbody></table></figure><p>​    2. 通过命令获取公钥</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通生成rsa方式（用于多个服务器之间的登录）</span></span><br><span class="line">ssh-keygen -t rsa   </span><br><span class="line">或</span><br><span class="line"><span class="comment"># 针对某个网站的rsa生成方式</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"xxxxx@xxxxx.com"</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">#查看sshkey的内容</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub  </span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210318175518.png" alt="image-20210318144956197"></p><ol start="3"><li>系统盘目录下（一般在 C:\Users\你的用户名.ssh）</li></ol><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210318175533.png" alt="image-20210318145354184"></p><ol start="4"><li>将id_ras.pub文件里的内容粘贴到到框框内</li></ol><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210318175550.png" alt="image-20210318145444469"></p><ol start="5"><li>最后在项目的终端输入</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gltee.com</span><br></pre></td></tr></tbody></table></figure><h4 id="三、上传代码"><a href="#三、上传代码" class="headerlink" title="三、上传代码"></a>三、上传代码</h4><h5 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h5><ol><li>进入本地项目目录初始化版本库</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化版本库</span></span><br><span class="line">git init  </span><br><span class="line"><span class="comment"># 添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件 </span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># 把添加的文件提交到版本库，并填写提交备注</span></span><br><span class="line">git commit -m <span class="string">"xxx"</span> </span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>设置远程仓库地址并提交    </li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置远程仓库地址</span></span><br><span class="line">git remote add origin https://gitee.com/xxxx/xxx.git  //你的远程库地址</span><br><span class="line"><span class="comment"># 提交到远程服务器</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></tbody></table></figure><h5 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h5><ol><li>先将仓库clone到本地</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将远程仓库克隆到本地</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/xxxx/xxx.git</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>提交代码</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加文件到版本库（只是添加到缓存区），.代表添加文件夹下所有文件 </span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># 把添加的文件提交到版本库，并填写提交备注</span></span><br><span class="line">git commit -m <span class="string">"xxx"</span> </span><br><span class="line"><span class="comment"># 将本地提交推送到远程仓库</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></tbody></table></figure><p><strong>注意</strong>：提交代码到远程仓库前需要先执行（拉取代码到本地）：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin 分支名称</span><br></pre></td></tr></tbody></table></figure><h4 id="四、Git-更换仓库地址"><a href="#四、Git-更换仓库地址" class="headerlink" title="四、Git 更换仓库地址"></a>四、Git 更换仓库地址</h4><ol><li>查看当前仓库地址信息</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>更换为新的地址</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin https://gitee.com/xxxx/xxx.git  //新地址</span><br></pre></td></tr></tbody></table></figure><h4 id="五、分支操作"><a href="#五、分支操作" class="headerlink" title="五、分支操作"></a>五、分支操作</h4><ol><li>创建分支</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建指定名称的分支</span></span><br><span class="line">git branch 分支名 </span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>查看分支</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有分支，* 号代表当前工作分支</span></span><br><span class="line">git branch </span><br><span class="line"><span class="comment"># 查看分支详情，包括分支指向的commitId及提交信息</span></span><br><span class="line">git branch -v </span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>切换分支</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切换到指定分支</span></span><br><span class="line">git checkout 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建并切换到指定分支 </span></span><br><span class="line">git checkout -b 分支名 </span><br></pre></td></tr></tbody></table></figure><p>​    4. 合并分支</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将指定分支合并到当前分支</span></span><br><span class="line">git merge 分支名 </span><br></pre></td></tr></tbody></table></figure><p>​    5. 删除分支</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除一个干净的分支(即相对当前分支而言该分支没有新的提交记录)</span></span><br><span class="line">git branch -d 分支名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除一个分支</span></span><br><span class="line">git branch -D 分支名</span><br></pre></td></tr></tbody></table></figure><p>​    <strong>注意：</strong>删除分支前都需要先切换到其他分支才能进行删除操作</p><ol start="6"><li>分支恢复</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据指定commit创建新分支</span></span><br><span class="line">git branch 分支名 版本号</span><br></pre></td></tr></tbody></table></figure><ol start="7"><li>重命名分支</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m 分支名 newname</span><br></pre></td></tr></tbody></table></figure><ol start="8"><li>分支暂存</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将工作暂存</span></span><br><span class="line">git stash </span><br><span class="line"></span><br><span class="line"><span class="comment"># 从暂存区之中进行恢复，恢复的同时也将stash内容删除</span></span><br><span class="line">git stash pop</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="学习" scheme="https://a08-k.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="git" scheme="https://a08-k.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Sofa</title>
    <link href="https://a08-k.github.io/posts/16107.html"/>
    <id>https://a08-k.github.io/posts/16107.html</id>
    <published>2021-03-31T05:26:33.286Z</published>
    <updated>2021-05-10T09:53:42.867Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://gitee.com/sponge_bob_0/cloudimages/raw/master/img/20210510174610.jpg" alt="001"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
